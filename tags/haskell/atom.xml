<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: haskell | while true live]]></title>
  <link href="http://sleepomeno.github.io/tags/haskell/atom.xml" rel="self"/>
  <link href="http://sleepomeno.github.io/"/>
  <updated>2014-03-11T17:50:35+01:00</updated>
  <id>http://sleepomeno.github.io/</id>
  <author>
    <name><![CDATA[Gregor Riegler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Migrating a mutating algorithm from C to Haskell]]></title>
    <link href="http://sleepomeno.github.io/blog/2014/03/11/Case-Study---From-C-to-Haskell/"/>
    <updated>2014-03-11T00:00:00+01:00</updated>
    <id>http://sleepomeno.github.io/blog/2014/03/11/Case-Study---From-C-to-Haskell</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently stumbled on a C implementation of an algorithm computing
the <em>combinations without repetition</em> (of a certain size <strong>k</strong>) of the first <strong>n</strong> natural
numbers. So the wanted result is a list of combinations like for
example <code>0 1 2 3 4</code> or <code>11 13 20 33 49</code> in the case of <code>k=5</code> and
<code>n=50</code> (<em>without repetition</em> means that no number occurs twice in the
same combination). As a matter of fact, I wanted to migrate that
function to Haskell; so this post is about the evolution of the
solution I came up with. I guess this case study is somehow kind of exemplary for
the thought process which you need to undergo whenever you migrate a
not-so-trivial algorithm from C to Haskell as it touches upon the
topics of <em>laziness</em> and <em>mutation</em>.</p>

<!-- more -->


<h1>The C Version</h1>

<p>So let&rsquo;s start with the C Version:</p>

<p>``` c</p>

<h1>include &lt;stdio.h></h1>

<p>int idx = 0;
/<em> puts all combinations into the array of its first argument </em>/
void combinationsWithoutRepetition(int <em>combinations, int </em>feld,int bound,int length,int pos,int val){
  if(pos==length) {</p>

<pre><code>int i;
for(i=0; i&lt;length; i++) {
  combinations[idx++] = feld[i];
}
</code></pre>

<p>  } else {</p>

<pre><code>int* feldPos = &amp;feld[pos];
int i;
for(i=val;i&lt;bound;++i){ 
  *feldPos=i; 
  combinationsWithoutRepetition(combinations,feld,bound,length,pos+1,i+1); 
}
</code></pre>

<p>  }
}
int main(int argc, char <em><em>argv) {
  int n=50;
  int k=5;
  int nrOfCombinations = 2118760; // assume that&rsquo;s correct for n=50,k=5
  int </em>combinations;
  combinations = malloc(nrOfCombinations</em>k*sizeof(int));</p>

<p>  int <em>singleCombination;
  singleCombination = malloc(k</em>sizeof(int));</p>

<p>  combinationsWithoutRepetition(combinations,singleCombination,n,k,0,0);
  int i = 0;
  for (i=0; i &lt; 50; i=i+5) {</p>

<pre><code>printf("%d %d %d %d %d \n", combinations[i],combinations[i+1],combinations[i+2],combinations[i+3],combinations[i+4]);
</code></pre>

<p>  }
}
```</p>

<p>So <code>combinationsWithoutRepetition</code> does all the work, however, memory
needs to be allocated for the two pointers to int first. (Surely, in a
real program <code>nrOfCombinations</code> would call a subroutine computing the
necessary number of computations, I omitted it for brevity&rsquo;s sake.) In
the end, the computed combinations can be accessed through the pointer
<code>combinations</code>.</p>

<p>Anyway, <code>combinationsWithoutRepetition</code> didn&rsquo;t look straightforward to
me, I didn&rsquo;t really understand how it worked and above all, I couldn&rsquo;t
see how I could tweak the algorithm so that I could do without the mutation
of <code>combinations</code> and <code>idx</code> in the Haskell solution. Consequently, I decided to
translate the C version more or less directly to Haskell, using the
<code>ST</code> monad.</p>

<p>The <code>ST</code> monad makes it possible to have references pointing to
mutable memory in Haskell. This comes in handy when you want to solve
a problem for which there is no efficient algorithm known doing
without mutation. In our case it gives us the power to create a first
running Haskell version without fully understanding the underlying
algorithm of the C implementation. Bear in mind that you always need to run <code>runST</code> to
get a value out of the <code>ST</code> monad like below.</p>

<h2>The ST Version</h2>

<p>``` haskell
comb1 :: Int &ndash;> [Int] &ndash;> [[Int]]
comb1 k elements = runST $ do
  let bound = length elements</p>

<pre><code>  boundMinus1 = bound-1
  elementArray = listArray (0, bound-1) elements

  comb1' :: STRef s [[Int]] -&gt; (Int, Int) -&gt; ST s ()
  comb1' combos  (pos, val) = 
    let comb1'' currentCombo (!pos, val)
          | pos == k  = modifySTRef combos ((:) currentCombo)
          | otherwise = forM_ [val..boundMinus1] $ \x -&gt; comb1'' (elementArray!x : currentCombo) (pos+1,x+1)
    in
     comb1'' [] (pos, val)
</code></pre>

<p>  combos &lt;&ndash; newSTRef []
  comb1' combos (0,0)
  readSTRef combos
```</p>

<p>This version already has two conceptual advantages: It can use an arbitrary list
of <code>Int</code> s as its second parameter (actually it could even be polymorphic
in the type of the list) and returns a list of lists which is
semantically more correct than the C implementation which implicitly
returned a long concatenation of the combination lists. Moreover, I
didn&rsquo;t need any mutable equivalent of <code>idx</code>.</p>

<p>Obviously, I wasn&rsquo;t too satisfied with this implementation, though.
Above all, the lack of <em>laziness</em> proves to be really annoying &ndash; the
whole list of combinations needs to be computed before you can access
the first element of it! This is devastating as in every real word
scenario of a decently large <code>n</code> and <code>k</code> the resulting list of
combinations is unlikely to fit into your available memory. So comes
the lazy <code>ST</code> monad to the rescue!</p>

<h2>The Lazy ST Version</h2>

<p>``` haskell
comb2 :: Int &ndash;> [Int] &ndash;> [[Int]]
comb2 k elements = L.runST $ do
  let bound = length elements</p>

<pre><code>  boundMinus1 = bound-1
  elementArray = listArray (0, bound-1) elements

  comb2' :: STRef s [[Int]] -&gt; (Int, Int) -&gt; L.ST s [[Int]]
  comb2' combos  (pos, val) = 
    let comb2'' currentCombo (!pos, val)
          | pos == k  = do { L.strictToLazyST $ modifySTRef combos ((:) currentCombo); return [currentCombo] }
          | otherwise = fmap concat $ forM [val..boundMinus1] $ \x -&gt; comb2'' (elementArray!x : currentCombo) (pos+1,x+1)
    in
     comb2'' [] (pos, val)
</code></pre>

<p>  combos &lt;&ndash; L.strictToLazyST $ newSTRef []
  comb2' combos (0,0)
```</p>

<p>Anyway, that&rsquo;s the first lazy <code>ST</code> implementation I could come up with
and luckily, it gave me the intuition how I could get completely rid of the <code>ST</code>
monad. It is obvious that the <code>modifySTRef</code> calls are absolutely
pointless as <code>fmap concat</code> just concatenates the <code>[currentCombo]</code>
lists returned by the base cases of the recursion and <code>combos</code> is not
even considered in the result of the computation. So let&rsquo;s see the
version resulting from throwing the <code>ST</code> monad into the garbage can:</p>

<h2>The No ST Version</h2>

<p>``` haskell
comb3 :: Int &ndash;> [Int] &ndash;> [[Int]]
comb3 k elements =
  let bound = length elements</p>

<pre><code>  boundMinus1 = bound-1
  elementArray = listArray (0, bound-1) elements
  comb3'  (pos, val) = comb3'' [] (pos, val)
    where
    comb3'' currentCombo (!pos, val)
      | pos == k  = [currentCombo]
      | otherwise = concat [comb3'' (elementArray!x : currentCombo) (pos+1, x+1) | x &lt;- [val..boundMinus1]]
  in
</code></pre>

<p>  comb3' (0,0)
```</p>

<p>That&rsquo;s much better but still a little obscure. In the end, I found a nice
declarative solution at last:</p>

<h2>The Declarative Version</h2>

<p><code>haskell
comb4 :: Int -&gt; [Int] -&gt; [[Int]]
comb4 0 _      = [[]]
comb4 n (x:xs) = map (x:) (comb4 (n-1) xs) ++ comb4 n xs
comb4 _ _      = []
</code></p>

<p>It just reads as: &ldquo;In order to get all <em>k</em>-combinations of a <em>n</em>
length list take the first element of the list, prepend it to all
combinations of size <em>k-1</em> of the tail of the list and then add all
those <em>k</em>-combations of the tail of the list!&rdquo; It finally makes sense
when you think about it for a long time ;) In addition, that approach
can be made a little bit more efficient for certain <em>n</em> and <em>k</em> using
a very simple memoization strategy. (This simple strategy very quickly
eats up your memory, though.)</p>

<h2>The memoized Declarative Version</h2>

<p>``` haskell
&mdash; Version with very simple memoization (&ldquo;memo table&rdquo;)
combTable = [[ comb5 n (drop elementNr numbers) | elementNr &lt;&ndash; zeroToLength] | n &lt;&ndash; zeroToLength]
   where
   zeroToLength = [0..length numbers]</p>

<p>comb5 :: Int &ndash;> [Int] &ndash;> [[Int]]
comb5 0 _      = [[]]
comb5 k (x:xs) = map (x:) (combTable !! (k-1) !! newlength) ++ (combTable !! k !! newlength)</p>

<pre><code>            where
                newlength = n-length xs
</code></pre>

<p>comb5 _ _      = []
```</p>

<h1>Conclusion</h1>

<p>Originally, I planned to examine each version&rsquo;s performance in detail,
however, that soon felt too cumbersome to me. Anyway, the <em>lazy</em>
versions do have a significant practical advantage as they do not need
to compute all combinations in order to get the first 10 combinations!
Judging from a few tests I have made, it also turns out that <code>comb3</code> (not using mutation) performs better
than both versions using <code>ST</code> even when all combinations are
requested so this seems to be a case where mutation does not buy you
anything in Haskell. If things look differently on your machine, feel
free to tell me ;)</p>

<p>You can find all solution versions <a href="http://sleepomeno.github.io/combinations/haskell-all.hs" target="_blank">here</a>, ready for GHCi. Anyway, feel
free to post other solutions to the problem which may score better in
terms of laziness/time performance/space performance/etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Explaining Haskell RankNTypes for all]]></title>
    <link href="http://sleepomeno.github.io/blog/2014/02/12/Explaining-Haskell-RankNTypes-for-all/"/>
    <updated>2014-02-12T00:00:00+01:00</updated>
    <id>http://sleepomeno.github.io/blog/2014/02/12/Explaining-Haskell-RankNTypes-for-all</id>
    <content type="html"><![CDATA[<p>The Glasgow Haskell Compiler supports a language extension called
<code>RankNTypes</code> which I&rsquo;ve had my problems to understand. The moment I
understood that it mostly refers to first-order logic universal
quantification things became easier, though&#x2026; but first let&rsquo;s explore why we
need it in a step-by-step example.</p>

<!-- more -->


<h2>length :: forall a. [a] &ndash;> Int</h2>

<p><code>haskell
:t length
-- length :: [a] -&gt; Int
length [1,2,3]
-- 3
let intLength :: [Int] -&gt; Int; intLength = length
:t intLength
-- intLength :: [Int] -&gt; Int
intLength [1,2,3]
-- 3
</code></p>

<p>We start with the well-known polymorphic function <code>length</code> in a fresh
GHCI session. Above we
see how the type checker instantiates <code>a</code> to be <code>Int</code> in the type of
<code>intLength</code>. Likewise we could create a function <code>charLength</code> &ndash;
anyway, <code>length</code> can be instantiated to oblige to a list of any type
we want, so it is defined <em>for all</em> possible types <code>a</code>. For the sake
of simplicity, I&rsquo;ll call a function like <code>intLength</code> (which actually
corresponds to instantiating the type variable <code>a</code> of <code>length</code>) a
<em>version</em> of <code>length</code>.</p>

<p>As a matter of fact, a normal Haskell type signature such as <code>[a]
-&gt; Int</code> always implies that the type variable(s) are universally
quantified with 1 <em>forall</em> section located at the beginning of the
type declaration. <code>length</code>&rsquo;s type thus corresponds to <code>forall a. [a] -&gt;
Int</code>. We call such a type a <em>Rank-1-Type</em> as there is 1 <em>forall</em> in
the type annotation. The fact that we can omit the <em>forall</em> usually &ndash;
and aren&rsquo;t used to it as a consequence &ndash; will make things look complicated
when we actually need it, as we&rsquo;ll see later on. In the end, <em>forall</em> provides
a scope just like its first-order logic equivalent.</p>

<h2>Apply a length-like function to a list</h2>

<p><code>haskell
let apply :: ([a] -&gt; Int) -&gt; [a] -&gt; Int; apply f x = f x
apply length "hello world"
-- 11
apply intLength [1,2,3]
-- 3
</code></p>

<p>The <code>apply</code> function just applies a function that takes a list and
returns an <code>Int</code> (like <code>length</code> does) to a value.
Nothing fancy nor useful at all, obviously. Still, let&rsquo;s note that under the hood
the type of <code>apply</code> is <code>forall a. ([a] -&gt; Int) -&gt; [a] -&gt; Int</code>. So far, so
good, the type checker is happy. Now let&rsquo;s a write a function
<code>applyToTuple</code> that applies a function like <code>length</code> to a tuple of
lists so that the lists of the tuple can be of different types.</p>

<h2>Apply a length-like function to a tuple of lists</h2>

<p><code>haskell
let applyToTuple f (a@(x:xs),b@(y:ys)) = (f a, f b) :: (Int, Int)
applyToTuple length ("hallo",[1,2,3])
--No instance for (Num Char)
--  arising from the literal `1'
-- ...
:t applyToTuple
-- applyToTuple :: ([t] -&gt; Int) -&gt; ([t], [t]) -&gt; (Int, Int)
</code></p>

<p>I wrote <code>applyToTuple</code> without a full type signature. <code>:: (Int,Int)</code>
just makes sure my wanted result type and by the help of the list
destructuring <code>a@(x:xs)</code> I make sure that the type inference algorithm
will conclude
that I have a tuple of lists in mind. Consequently, the type of the
function given to <code>applyToTuple</code> is inferred to correspond to
<code>length</code>&rsquo;s type; at least, that&rsquo;s what I would expect naively.</p>

<p>However, type inference of <code>applyToTuple</code> does not result in the type I had
in mind. As we can see the types of lists in the tuple <code>([t],[t])</code> are
the same so that calling <code>applyToTuple length</code> with a heterogeneous
tuple like <code>("hallo",[1,2,3])</code> doesn&rsquo;t work. Being stubborn I could
then try &ldquo;forcing&rdquo; the type by providing a type signature:</p>

<p><code>haskell
let applyToTuple :: ([a] -&gt; Int) -&gt; ([b],[c]) -&gt; (Int, Int); applyToTuple f (x,y) = (f x, f y)
-- Couldn't match type `b' with `a' ...
-- Couldn't match type `c' with `a' ...
</code></p>

<p>This attempt also fails as GHCI complains about the fact that the
types <code>b</code> and <code>a</code>, <code>c</code> and <code>a</code> respectively, do not match! However, the
<code>length</code>-like function <code>([a] -&gt; Int)</code> should be applicable to a list of
whatever type, shouldn&rsquo;t it?!? That&rsquo;s the moment
you&rsquo;d start doubting either GHCI or your mental health as you know precisely
that it <em>should be possible</em> to write such a function. After all, you
know intuitively that it <strong>is</strong> possible to apply a function like <code>length</code>
to both parts of a heterogeneous tuple of lists as in the code below;
doing that in a more generic way in a function like <code>applyToTuple</code>
should be possible as well!</p>

<p><code>haskell
-- Obviously, that works without a problem:
(\(a,b) -&gt; (length a, length b)) ("hallo",[1,2,3])
-- (5,3)
</code></p>

<h2>applyToTuple :: (forall a.[a] &ndash;> Int) &ndash;> ([b],[c]) &ndash;> (Int, Int)</h2>

<p>Well, there is just one explanation: the type <code>([a] -&gt; Int)
-&gt;([b],[c]) -&gt; (Int, Int)</code> is not really what we need for our purpose.
In fact, we need <code>RankNTypes</code>!
We first enable the extension in GHCI and can then write the correct
<code>applyToTuple</code> implementation using the <code>forall</code> keyword in the type
of the first parameter function. (If you want to use the
<code>RankNTypes</code> extension in a file to compile, you actually need to add <code>{-#
LANGUAGE RankNTypes #-}</code> at the top of the file)</p>

<p><code>haskell
:set -XRankNTypes
let applyToTuple :: (forall a.[a] -&gt; Int) -&gt; ([b],[c]) -&gt; (Int, Int); applyToTuple f (x,y) = (f x, f y)
applyToTuple length ("hello", [1,2,3])
-- (5,3)
</code></p>

<p>This time it works! :&ndash;)</p>

<h2>Explanation</h2>

<p>We noted earlier that every Haskell type signature&rsquo;s type variables
are <em>implicitly</em> universally quantified by an &lsquo;invisible&rsquo; <code>forall</code>
section. Thus, under the hood we get the types as follows:</p>

<p>``` haskell
&mdash; just a reminder:
&mdash; length :: forall a. [a] &ndash;> Int
let intLength :: [Int] &ndash;> Int; intLength = length</p>

<p>&mdash;  applyToTuple:
let applyToTuple :: forall a b c. ([a] &ndash;> Int) &ndash;> ([b], [c]) &ndash;> (Int, Int); applyToTuple f (x,y) = (f x, f y)
&mdash; correct applyToTuple:
let applyToTuple :: forall b c. (forall a. [a] &ndash;> Int) &ndash;> ([b], [c]) &ndash;> (Int, Int); applyToTuple f (x,y) = (f x, f y)
```</p>

<p>Now things get clearer: The function in the type of the correct
<code>applyToTuple</code> has the type <code>(forall a. [a] -&gt; Int)</code> which is exactly
the type given for <code>length</code> above, hence it works. On the other hand,
the type <code>([a] -&gt; Int)</code> of the function parameter in the wrong
<code>applyToTuple</code> type signature <em>looks</em> like the type of <code>length</code> <strong>but it isn&rsquo;t</strong>!</p>

<p>Have a look at what the type
checker would &ldquo;think&rdquo; confronted with the wrong <code>applyToTuple</code> type
signature. When it reads the expression <code>applyToTuple length</code> it would
expect the type variables <code>a</code>, <code>b</code> and <code>c</code> to be <strong>different</strong>
concrete types, so <code>([a] -&gt; Int)</code> might become <code>([Char] -&gt; Int)</code> or
<code>([Int] -&gt; Int)</code> like our <code>intLength</code> function, shortly, some
<em>version</em> of <code>length</code>. In the implementation <code>(f x, f y)</code> seeks to apply that <em>version</em> of
<code>length</code> to two lists of <strong>different</strong> types &ndash; however, <strong>any</strong> <em>version</em> of
<code>length</code> expects its list to always be of 1 concrete type only, e.g. <code>Int</code> in
the case of our function <code>intLength</code>, consequently, the type checker
refuses the lists of the tuple to possibly be of different types!</p>

<p>Why does the correct definition of <code>applyToTuple</code> work then? It
expects a <code>length</code>-like function of type <code>(forall a. [a] -&gt; Int)</code>, that&rsquo;s a function
which works <strong>for all</strong> types <code>a</code>, no matter what type you throw at it!
Thus, it forces that function to be a polymorphic function just like
<code>length</code> and rules out any candidate <em>version</em> of <code>length</code> (like <code>intLength</code>) as a consequence.
Since you can throw a list of any type at that function it can deal with the 2
lists of different types and the code compiles!</p>

<h2>Conclusion</h2>

<p>Using <code>RankNTypes</code> and the <em>forall</em> keyword you can specify that a
function&rsquo;s argument needs to be a <em>polymorphic</em> function (like
<code>length</code> in our example). In spite of the fact that you can omit the top-level
<em>forall</em> in the type signature of a polymorphic type, you need to include
it when you reference it as a parameter.</p>

<p>In a future blog post I will investigate an important application of
<code>RankNTypes</code> in the Haskell standard library. It will be about the
<code>ST</code> monad which provides a <em>safe</em> environment for <strong>mutation</strong> in
Haskell with the help of <code>RankNTypes</code>. Mutation and Haskell?! Yes,
you can do it thanks to <code>RankNTypes</code>!</p>

<p><em>PS: There is a nice</em>
<a href="http://stackoverflow.com/questions/3071136/what-does-the-forall-keyword-in-haskell-ghc-do" target="_blank">stackoverflow thread</a> <em>which investigates the use of &ldquo;forall&rdquo; in other
language extensions as well. Actually, my &ldquo;applyToTuple&rdquo; function is based on</em>
<a href="http://stackoverflow.com/a/3071932/928944" target="_blank">that answer</a> of the thread.</p>
]]></content>
  </entry>
  
</feed>
