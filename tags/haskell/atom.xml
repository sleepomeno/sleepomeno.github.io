<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: haskell | while true live]]></title>
  <link href="http://sleepomeno.github.io/tags/haskell/atom.xml" rel="self"/>
  <link href="http://sleepomeno.github.io/"/>
  <updated>2018-01-15T22:14:21+01:00</updated>
  <id>http://sleepomeno.github.io/</id>
  <author>
    <name><![CDATA[Gregor Riegler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rolling the dice using random Enum values]]></title>
    <link href="http://sleepomeno.github.io/blog/2017/04/02/Generating-random-Enum-values/"/>
    <updated>2017-04-02T00:00:00+02:00</updated>
    <id>http://sleepomeno.github.io/blog/2017/04/02/Generating-random-Enum-values</id>
    <content type="html"><![CDATA[<p>Every wanted to roll the dice in Haskell? Let&rsquo;s say you have a data type like</p>

<p>``` haskell
data Number = One | Two | Three | Four | Five | Six</p>

<pre><code> deriving (Enum, Bounded, Eq, Show)
</code></pre>

<p>```</p>

<p>How do you generate a random <code>Number</code> value? There are several ways to do it, usually in an <code>IO</code> context, obviously. In order to use it in a
common monad transformer stack, the primitives of the <code>MonadRandom</code> type class come to my mind. So it would be most convenient to get a
 random value using <code>getRandom</code>. Anyway, as much fun as rolling the dice is, let&rsquo;s derive a solution working for all bounded Enums.</p>

<!-- more -->


<p>Anyway, import <strong>Control.Monad.Random</strong> as we want to use <code>getRandom</code> of the <code>MonadRandom</code> class which looks like:</p>

<p>``` haskell
class Monad m => MonadRandom (m :: * &ndash;> *) where</p>

<pre><code>getRandom :: Random a =&gt; m a
</code></pre>

<p>&mdash; other functions we don&rsquo;t need</p>

<p>class Random a where
&mdash; needs to provide:</p>

<pre><code>randomR :: RandomGen g =&gt; (a, a) -&gt; g -&gt; (a, g)
random :: RandomGen g =&gt; g -&gt; (a, g)
</code></pre>

<p>```</p>

<p>Shortly, <code>randomR</code> needs to be able to provide a random <code>Number</code> value in the specified interval, given a random number generator. So the idea is about mapping the Enum values to <code>Int</code> values
and deriving a random Enum value from a randomly generated number.</p>

<p>``` haskell
&mdash; :t fromEnum
&mdash; fromEnum :: Enum a => a &ndash;> Int
&mdash; :t toEnum
&mdash; toEnum :: Enum a => Int &ndash;> a</p>

<p>&mdash; 1)
instance Random Number where</p>

<pre><code>randomR (a,b) g = 
    case randomR (fromEnum a, fromEnum b) g of
            (x, g') -&gt; (toEnum x, g')
random g = randomR (One, Six) g
</code></pre>

<p>&mdash; 2) &ndash; more general solution making use of Bounded
instance Random Number where</p>

<pre><code>randomR = enumRandomR
random g = randomR (minBound, maxBound) g
</code></pre>

<p>enumRandomR (a, b) g =</p>

<pre><code>case randomR (fromEnum a, fromEnum b) g of
    (x, g') -&gt; (toEnum x, g')
</code></pre>

<p>```</p>

<p>While we still used the explicit <code>Number</code> interval values in <strong>1)</strong>, we get a more general solution in <strong>2)</strong> using the fact that we had auto-derived an instance of <code>Bounded</code> for <code>Number</code> and thus have <code>minBound</code> and <code>maxBound</code> at our disposal.</p>

<p>At last, we can generate a random <code>Number</code> value:</p>

<p><code>haskell
λ&gt; getRandom :: IO Number
Two
</code></p>

<p>Anyway, our generated <code>Number</code> values are uniformly distributed, every value occurs with equal probability. What if you want to tamper with the die at little, e.g.
when your opponent throws the dice they should not get a <code>Six</code> quite so often. You could do that providing a respective <code>Random</code> instance for a newtype wrapper:</p>

<p>``` haskell
&mdash; you need GeneralizedNewtypeDeriving pragma to derive Enum
newtype MaxBoundLessLikely a = MaxLessLikely {</p>

<pre><code>getValue :: a } deriving (Bounded, Eq, Enum, Show)
</code></pre>

<p>instance (Enum a, Eq a, Bounded a) => Random (MaxBoundLessLikely a) where</p>

<pre><code>randomR (a,b) g = case enumRandomR (a,b) g of
    result@(MaxLessLikely value, g') -&gt; 
         if value == maxBound then
             enumRandomR (a,b) g'
         else result
random g = randomR (minBound, maxBound) g
</code></pre>

<p>```</p>

<p>Your <code>rollDice</code> function then looks so inconspicuous, your opponent might not even notice:</p>

<p>``` haskell
data Player = Me | Opponent</p>

<p>rollDice Me = getRandom
rollDice Opponent = fmap getValue getRandom</p>

<p>howManySixes :: MonadRandom m => Player &ndash;> Int &ndash;> m Int
howManySixes player nrThrows = do</p>

<pre><code>results &lt;- replicateM nrThrows (rollDice player)
return $ length . filter (== Six) $ results
</code></pre>

<p>```</p>

<p>They might actually think that they are just unlucky:</p>

<p><code>haskell
λ&gt; howManySixes Me 1000
170
λ&gt; howManySixes Opponent 1000
46
</code></p>

<p>You can find the source <a href="http://sleepomeno.github.io/enum/RandomEnum.hs" target="_blank">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[else return null]]></title>
    <link href="http://sleepomeno.github.io/blog/2015/01/05/else-return-null/"/>
    <updated>2015-01-05T00:00:00+01:00</updated>
    <id>http://sleepomeno.github.io/blog/2015/01/05/else-return-null</id>
    <content type="html"><![CDATA[<p>I guess everybody has a story or two in store about Nullpointer
exceptions in Java (or in any language with nullable values). Sooner or later you will make the acquaintance of the dreaded stacktrace line
denoting that you did something terribly wrong, demanding a value
where none exists, and you just wonder <em>why, how the hell can that
object be null?!</em> during an hour of painful debugging&#x2026; you know
that? Good. Well, I won&rsquo;t ponder over how to avoid it, how to apply
proper error handling etc. (that&rsquo;s way too complicated, I&rsquo;m tired) but I&rsquo;d just like to point out my personal
favourite, the
famous <code>else return null</code> idiom.</p>

<!-- more -->


<p>Anyway, the below snippet shows what I actually mean by that.</p>

<p>``` java
// Version 1
if (password == &ldquo;12345&rdquo;)</p>

<pre><code> return valuableTreasure;
</code></pre>

<p>else</p>

<pre><code> return null;
</code></pre>

<p>// or, equivalently
// Version 2
if (password == &ldquo;12345&rdquo;)</p>

<pre><code> return valuableTreasure;
</code></pre>

<p>return null;
```</p>

<p>To make things more familiar, in Version 2 you could imagine multiple <code>return null</code> lines hidden in
various control structures in an endless method and you surely get an idea
how people feel when they try to reason about an object being <em>null</em>
or not.
Anyway, spotting an <code>else return null</code> I always get a bad gut feeling
saying that things are not what they are supposed to be. I&rsquo;m aware
that this obviously touches upon the question if you should avoid
<em>null</em> values altogether. Anyway, I can&rsquo;t help my bad gut feeling
whenever I see it ;)</p>

<p>The funny thing is that I recently wrote similar code myself; that
alone would not be a surprise yet, but I actually wrote it in
Haskell which does not have that notion of <em>null</em> values and the
corresponding Nullpointer exception. In Haskell, there is the <a href="https://www.haskell.org/haskellwiki/Maybe" target="_blank">Maybe monad</a> which facilitates chaining &ldquo;partial&rdquo; computations together without
the risk of a Nullpointer exception. Here is the snippet of that code
(obviously, only the <code>else Nothing</code> is &lsquo;important&rsquo;).</p>

<p>``` haskell
newState =</p>

<pre><code>if not shouldBeCompiled &amp;&amp; w' == view T.word W.immediate' then
 (oldState ^. lastColonDefinition ) &gt;&gt;=
 (\x -&gt; return $ oldState &amp; definedWords %~ (ix x %~ set isImmediate True))
else 
 Nothing
</code></pre>

<p>```</p>

<p>Anyway, believe me, if you ever write such an <code>else Nothing</code> in Haskell, that should
be the trigger &ndash; take a deep breath, take a coffee and think about your
problem again. At the least, you are overcomplicating things as using
the <em>Monad</em> or <em>MonadPlus</em> nature of <em>Maybe</em> would make life easier
but probably it&rsquo;s an indication that your thoughts are about to go
astray and you get lost in old <code>else return null</code> habits or worse &ndash; so better
stop it and take a break!</p>

<p>How would the <em>MonadPlus</em> and <em>Monad</em> instances make life better? Look
at the below version. In any case, it&rsquo;s functionally equivalent, so
how would it be &lsquo;better&rsquo;? In my opinion, it conveys much
more the impression that the programmer actually knows what they are doing.</p>

<p>``` haskell
newState = do</p>

<pre><code>guard $ not shouldBeCompiled &amp;&amp; w' == (view T.word W.immediate')

x &lt;- oldState ^. lastColonDefinition
return $ oldState &amp; definedWords %~ (ix x %~ set isImmediate True)
</code></pre>

<p>```</p>

<p>Essentially, the <code>guard</code> function does the trick. <code>guard</code>, which has the type
<em>guard :: MonadPlus m => Bool &ndash;> m ()</em>, makes the containing <em>do</em>
block evaluate to <code>Nothing</code> if the <code>Bool</code> argument evaluates to
<code>False</code>. In that sense, the <code>guard</code> expression actually looks like an
assertion! The whole <em>MonadPlus</em> magic can be further explored <a href="http://en.wikibooks.org/wiki/Haskell/MonadPlus" target="_blank">here</a>.</p>

<p>In my case, I finally ended up removing those lines altogether. As suspected, the
good old <code>else Nothing</code> was the symptom that I had lost track of
what I was coding at all &ndash; completely lost in nothingness &ndash; and I really needed a
break.</p>

<p>So what is your typical &lsquo;silly code&rsquo; that you typically start writing when
you should rather take a break?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using XMonad with a projector]]></title>
    <link href="http://sleepomeno.github.io/blog/2014/11/07/Using-XMonad-with-a-projector/"/>
    <updated>2014-11-07T00:00:00+01:00</updated>
    <id>http://sleepomeno.github.io/blog/2014/11/07/Using-XMonad-with-a-projector</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using XMonad for a few years now (lately in combination with
GNOME) but just recently I have found a way to make it work in a useful way
in the context of a presentation with a projector as a second screen.</p>

<p>In general, XMonad does have decent multi-screen support. Building on
Xinerama, the default configuration provides key-binding support for
three screens; how workspaces are mapped to the screens and how this
mapping can change, respectively, can be pretty confusing at first, though &ndash;
it is best explained in <a href="http://www.reddit.com/r/xmonad/comments/ndww5/dual_screens_multi_monitors_tips_and_tricks/c38dsfx" target="_blank">here</a>. Whenever I want to use a projector
things get pretty tricky, however.</p>

<!-- more -->


<p>The thing is: Using a projector as a second screen, I want to have
exactly the same workspace (accordingly the same windows, same layout,
obviously) on both screens. Apparently, I could do that by &lsquo;mirroring&rsquo;
the screens and thus circumventing XMonad multi-screen support. I&rsquo;m
not too happy with it, though, as, for some reason, I can&rsquo;t get <em>xrandr</em>
make show a reasonable resolution on both screens in that scenario &ndash;
part of what is shown on own screen is hidden on the other. Disabling
mirroring, however, it is <strong>impossible</strong> for XMonad to show exactly the
same on both screens &ndash; obviously, this is a restriction imposed by
Xinerama as it manages all workspaces across screens as <em>one</em>
large workspace under the hood.</p>

<p>The cure for that disease is the trick I found in another reddit
thread:
<a href="http://www.reddit.com/r/xmonad/comments/2ha25r/same_workspaces_on_multiple_monitors_without/ckrobfj" target="_blank">same workspaces on multiple monitors</a>.
So let&rsquo;s assume the following setup: Workspace 1 is shown on your
projector screen, Workspace 2 is shown on your internal screen. You
start a VNC server on workspace 1 on localhost:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x11vnc -usepw -clip xinerama0 -noxdamage -geometry 1920x1080</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>(You might need to replace &lsquo;xinerama0&rsquo; by &lsquo;xinerama1&rsquo;. &lsquo;1920x1080&rsquo;
conforms to the resolution of my internal screen. &lsquo;-noxdamage&rsquo; is
optional but seems to be recommended.)</p>

<p>On Workspace 2 you start a VNC client:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vncviewer ViewOnly=1 UseLocalCursor=0 localhost:0</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>(Again you might need to replace &lsquo;localhost:0&rsquo; by &lsquo;localhost:1&rsquo;.)</p>

<p>Well, now you get to see your projected presentation on your internal screen,
too, showing the X display of your VNC server screen! Move to Workspace 1 and start your presentation (or your live
coding, for example) while you actually watch your presentation on your internal screen on Workspace
2! As a bonus, during your presentation you could easily do things
which are not intended to be shown by the projector and/or move
windows from an internal workspace to Workspace 1 when they need to be shown.</p>

<p>Starting the vncviewer with the &lsquo;ViewOnly&rsquo; option makes it necessary
that you actually make your live in-presentation changes on Workspace
1, as I said (while watching your own changes on Workspace 2 on your
internal screen). That&rsquo;s my recommendation anyway, in my experience the viewer setup thus works more
stable and some keyboard inputs wouldn&rsquo;t be translated correctly from
the viewer to the server using a non-ViewOnly mode.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The notoriously point-free "((x.).)" trick]]></title>
    <link href="http://sleepomeno.github.io/blog/2014/08/14/Composing-two-argument-functions/"/>
    <updated>2014-08-14T00:00:00+02:00</updated>
    <id>http://sleepomeno.github.io/blog/2014/08/14/Composing-two-argument-functions</id>
    <content type="html"><![CDATA[<p><a href="http://www.haskell.org/haskellwiki/Pointfree" target="_blank">Point-free</a> code is ubiquitous in every well-polished Hackage library.
It&rsquo;s more concise than its pointed counterparts and feels more
&ldquo;hygienic&rdquo; as function composition immediately translates to its
mathematical background.</p>

<p><code>haskell
let pointFree = (+1) . read
let notPointFree x = (+1) (read x)
-- notPointFree 'mentions' its argument "x"
</code></p>

<p>So far, so good. However, you get a problem in your chain of function
composition when your right-most function &ldquo;takes two parameters&rdquo;.</p>

<p>``` haskell
let plusOne = (+1) :: Int &ndash;> Int
let readTwoArgs = (\x y &ndash;> read x + read y) :: String &ndash;> String &ndash;> Int</p>

<p>let coolSolution = plusOne . readTwoArgs :: String &ndash;> String &ndash;> Int
&mdash; Type checker doesn&rsquo;t like coolSolution</p>

<p>let boringSolution x y = plusOne (readTwoArgs x y)
&mdash; it&rsquo;s boring since it&rsquo;s not point-free
```</p>

<p>Unfortunately, <code>coolSolution</code> is not well-typed; this might drive you
nuts for some time: It&rsquo;s obvious that composing those functions must
somehow work. You&rsquo;d think: &ldquo;Even GHCI must have understood what I
mean!&rdquo; However, Haskell doesn&rsquo;t care for what you mean as much as it
cares for type-safety ;) ! So you might fall back on <code>boringSolution</code>
which is only half the fun as it&rsquo;s not point-free&#x2026; anyway, there IS
a way to compose those functions!</p>

<!-- more -->


<p>In the following I will use
<a href="http://www.haskell.org/haskellwiki/GHC/TypedHoles" target="_blank">Typed holes</a>. They are a nice tool to look into the type checker&rsquo;s
&ldquo;thoughts&rdquo;.
Well, first have a look at why <code>coolSolution</code> did not type-check at all.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Couldn&rsquo;t match type ‘Int’ with ‘String &ndash;> Int’
</span><span class='line'>Expected type: Int &ndash;> String &ndash;> Int
</span><span class='line'>  Actual type: Int &ndash;> Int
</span><span class='line'>In the first argument of ‘(.)’, namely ‘plusOne’
</span><span class='line'>In the expression: plusOne . readTwoArgs :: String &ndash;> String &ndash;> Int</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Essentially, this tells us that <code>plusOne</code> does not have the right type
to be used together with <code>(. readTwoArgs)</code>. Now let&rsquo;s ask this
question to the type checker: What do I need to apply to <code>plusOne</code> so
that you are happy?</p>

<p><code>haskell
((_ plusOne) . readTwoArgs) "3" "2" :: Int
</code></p>

<p>The answer we get is:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Found hole ‘&lt;em>’
</span><span class='line'>  with type: (Int &ndash;> Int) &ndash;> (String &ndash;> Int) &ndash;> [Char] &ndash;> Int
</span><span class='line'>Relevant bindings include it :: Int (bound at &lt;interactive>:88:1)
</span><span class='line'>In the expression: _
</span><span class='line'>In the first argument of ‘(.)’, namely ‘(&lt;/em> plusOne)’
</span><span class='line'>In the expression: (_ plusOne) . readTwoArgs</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Okay, this help us. Our &ldquo;hole function&rdquo;&rsquo;s type is <code>(Int -&gt; Int) -&gt;
(String -&gt; Int) -&gt; [Char] -&gt; Int</code>. Now we just write that
function &ndash; actually, the type signature and our knowledge of what
should be the result of the whole expression give rise to that <em>unique</em> <code>holeFunction</code>:</p>

<p><code>haskell
let holeFunction plusOne' stringToInt string = plusOne' (stringToInt string)
let holeFunction plusOne' stringToInt string = plusOne' . stringToInt $ string
let holeFunction plusOne' stringToInt = plusOne' . stringToInt
let holeFunction plusOne' stringToInt = (.) plusOne' stringToInt
let holeFunction plusOne' = (.) plusOne'
let holeFunction = (.)
</code></p>

<p>By (re)writing it in a point-free style and by applying eta-reductions we
get a very simple definition. It turns out that our <code>holeFunction</code> is
just ordinary function composition^^. Anyway, let&rsquo;s have a look if that works.</p>

<p><code>haskell
let coolSolution = ((.) plusOne). readTwoArgs
let coolSolution = (plusOne .). readTwoArgs
-- (coolSolution "3" "4") == 8
</code></p>

<p>Yes, it does! That &ldquo;.).&rdquo; looks funny and will surely confuse everybody
whose doesn&rsquo;t know that &ldquo;trick&rdquo; (and does not have a type-checker in
their brain). However, it gets even funnier. When your right-most
function expects even more arguments you just add &lsquo;a couple of&rsquo; &ldquo;.)"s
in between!</p>

<p><code>haskell
let wasteFourArgs = (\a b c d -&gt; read a + read b) :: String -&gt; String -&gt; String -&gt; String -&gt; Int
let coolSolution' = (((plusOne .) .) .). wasteFourArgs
</code></p>

<h2>Conclusion</h2>

<p>Thus, we have found a way to use the (point-free) function
composition even when you need to feed more than a single argument
into it!</p>

<p>As point-free code is more concise it can be clearer about what you
want to do, however, it can obfuscate your intentions as well! (Look
at those <a href="http://www.haskell.org/haskellwiki/Pointfree#Combinator_discoveries" target="_blank">combinators</a>). In the
case of this <em>((x.).)</em> trick, I think it can still be beneficial if
and only if everybody in your team &ldquo;knows the trick&rdquo; and does not have
to think about it. The nice reason is: As soon as you delete that &ldquo;.)&rdquo;
chain mentally you immediately grasp the meaning of the resulting function!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Explaining the Magic]]></title>
    <link href="http://sleepomeno.github.io/blog/2014/06/25/Explaining-the-Magic/"/>
    <updated>2014-06-25T00:00:00+02:00</updated>
    <id>http://sleepomeno.github.io/blog/2014/06/25/Explaining-the-Magic</id>
    <content type="html"><![CDATA[<p>Yesterday I came across a <a href="http://www.reddit.com/r/haskell/comments/28zx87/whats_your_favorite_response_to_the_show_me_the/" target="_blank">post</a> on the haskell reddit where somebody
posted the following application of <em>replicateM</em>:</p>

<p><code>haskell
:m +Control.Monad
replicateM 3 "01"
-- ["000","001","010","011","100","101","110","111"]
</code></p>

<h2>Dark Magic</h2>

<p>It obviously results in all three-character combinations of zeros and
ones and in general, <em>replicateM x &ldquo;01&rdquo;</em> generates all x-character
combinations of zeros and ones accordingly.</p>

<p><em>replicateM</em> is a standard library function and its haddock
documentation says: &ldquo;<em>replicateM n act</em> performs the action n times,
gathering the results&rdquo; and its type actually is <code>replicateM :: Monad m
=&gt; Int -&gt; m a -&gt; m [a]</code>. So <em>replicateM</em> is <strong>not</strong> a function
explicitly crafted for the purpose of a &ldquo;get me all x-ary combinations
of my string&rdquo; task, it is actually defined for all monads. Just
imagine a more obvious application using the IO monad, which <em>performs the action of
printing hello 3 times and gathers the result</em>.</p>

<p><code>haskell
replicateM 3 (putStrLn "hello")
-- hello
-- hello
-- hello
-- [(),(),()]
</code></p>

<p>It is typical Haskell practice to use a function with such a <em>general</em> look
to solve a rather <em>special</em> problem as our original one &ndash; to such a
degree that it seems like <strong>magic</strong> to programmers with a different
background. Actually, it might look like &ldquo;dark&rdquo; magic when you don&rsquo;t
grasp how/why the hell that result comes about in spite of looking at
the source of <em>replicateM</em>, and you might start getting annoyed with
Haskell altogether if that happens several times&#x2026; anyway, there is no
such thing as (dark) magic ;) so let&rsquo;s demystify that interesting example!</p>

<!-- more -->


<h2>Why it works</h2>

<p>Before looking at the source &ndash; and getting to the operational side of
<em>replicateM</em> &ndash; let&rsquo;s ask ourselves <em>why</em> we get that result.</p>

<p>By taking the documentation into account we can paraphrase <em>replicateM 3 &ldquo;01&rdquo;</em> by saying:
<em>It performs &ldquo;01&rdquo; 3 times and gathers the results</em>. But what sort of action is <code>&ldquo;01&rdquo;</code>.
As a string is a list of characters, it&rsquo;s equal to <code>[&lsquo;0&rsquo;,&lsquo;1&rsquo;]</code> which denotes a &lsquo;non-deterministic&rsquo; character value.
Imagine it as a two-faced character which doesn&rsquo;t know if it really is a &lsquo;0&rsquo; or a &lsquo;1&rsquo;! So what does <em>performing &ldquo;01&rdquo;</em> really mean?
I picture it as creating two parallel universes where that value dissolves into &lsquo;0&rsquo; in the first and into &lsquo;1&rsquo; in the second universe.
Performing another &ldquo;01&rdquo; branches those two universes again so that we get 4 universes. Doing that a third time, those 4
universes branch again in choosing the third value of either &lsquo;0&rsquo; or &lsquo;1&rsquo;. As a result, we get 8 universes which really are 8 lists of characters.
When you gather them you obviously get <em>[&ldquo;000&rdquo;,&ldquo;001&rdquo;,&ldquo;010&rdquo;,&ldquo;011&rdquo;,&ldquo;100&rdquo;,&ldquo;101&rdquo;,&ldquo;110&rdquo;,&ldquo;111&rdquo;]</em>! Confused? Maybe you like the &lsquo;How&rsquo; better!</p>

<h2>How it works</h2>

<p><a href="http://www.haskell.org/hoogle/" target="_blank">Hoogle</a> is my tool of choice to quickly get to base library haskell
source. So <a href="http://hackage.haskell.org/package/base-4.7.0.0/docs/src/Control-Monad.html#replicateM" target="_blank">this</a> tells how <em>replicateM</em> is defined:</p>

<p><code>haskell
replicateM n x = sequence (replicate n x)
:t replicateM
-- replicateM :: Monad m =&gt; Int -&gt; m a -&gt; m [a]
</code></p>

<p>By hoogling for <a href="http://hackage.haskell.org/package/base-4.7.0.0/docs/src/GHC-List.html#replicate" target="_blank">replicate</a> and <a href="http://hackage.haskell.org/package/base-4.7.0.0/docs/src/Control-Monad.html#sequence" target="_blank">sequence</a> we get the whole picture:</p>

<p>``` haskell</p>

<p>sequence ms = let k m m' = do { x &lt;&ndash; m; xs &lt;&ndash; m'; return (x:xs) } in foldr k (return []) ms
replicate n x           =  take n (repeat x)</p>

<p>:t sequence     <br/>
&mdash;sequence :: Monad m => [m a] &ndash;> m [a]
:t replicate
&mdash;replicate :: Int &ndash;> a &ndash;> [a]
```</p>

<p><em>replicate</em> surely is the easiest function to grasp: <code>replicate n x</code>
results in a list with <em>n</em> elements of value <em>x</em>. For instance:</p>

<p><code>haskell
replicate 3 "01"
--["01","01","01"]
</code></p>

<p>So we can actually get the following equations:</p>

<p><code>haskell
replicateM 3 "01" == sequence ["01","01","01"] ==
["000","001","010","011","100","101","110","111"]
</code></p>

<p>So the magic somehow lies in the <em>sequence</em> method or rather in the
List monad!</p>

<h3>Sequence</h3>

<p>As in our application <em>sequence</em> operates in the list monad you can
picture it using a list comprehension if you are more familiar with it:</p>

<p><code>haskell
sequence ms = let k m m' = [x:xs | x &lt;- m, xs &lt;- m'] in foldr k (return []) ms
-- m is a string, x is a character
-- m' is a list of strings (= the accumulator), xs is a string
:t sequence
-- sequence :: [[a]] -&gt; [[a]]
</code></p>

<p>Let&rsquo;s have a closer look at the last call of <em>k</em> in <em>sequence</em>.</p>

<p><code>haskell
replicateM 3 "01"
-- == k "01" ["00","01","10","11"] ==
[x:xs | x &lt;- "01", xs &lt;- ["00","01","10","11"]]
-- == ["000","001","010","011"] ++ ["100","101","110","111"]
-- == ["000","001","010","011","100","101","110","111"]
</code></p>

<p>At first <em>x</em> is selected to be &lsquo;0&rsquo; and prepended to all strings of
<em>xs</em>, the resulting list of strings is then concatenated with <em>x</em>
being &lsquo;1&rsquo; prepended to all strings of <em>xs</em> again. As a result, we will
always get a lexicographically correct ordering of all <em>n</em>-ary combinations of
&ldquo;01&rdquo; no matter what <em>n</em> we choose in <strong>replicateM n [&lsquo;0&rsquo;,&lsquo;1&rsquo;]</strong>.</p>

<p>We have seen how an innocent-looking function like <em>replicateM</em> can &ndash;
when it is used with the List monad &ndash; produce a &ldquo;magical&rdquo; result, only to then discover that there is no magic involved ;)</p>
]]></content>
  </entry>
  
</feed>
