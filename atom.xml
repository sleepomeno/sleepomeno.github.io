<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[while true live]]></title>
  <link href="http://sleepomeno.github.io/atom.xml" rel="self"/>
  <link href="http://sleepomeno.github.io/"/>
  <updated>2015-11-16T15:15:39+01:00</updated>
  <id>http://sleepomeno.github.io/</id>
  <author>
    <name><![CDATA[Gregor Riegler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Toying with Racket]]></title>
    <link href="http://sleepomeno.github.io/blog/2015/09/13/Toying-with-Racket/"/>
    <updated>2015-09-13T00:00:00+02:00</updated>
    <id>http://sleepomeno.github.io/blog/2015/09/13/Toying-with-Racket</id>
    <content type="html"><![CDATA[<p>2 hours to go&#x2026; I&rsquo;ve been waiting for the men&rsquo;s tennis US Open final
to start. What should I do? In the end, I&rsquo;ve been killing time listening to <a href="http://www.functionalgeekery.com/episode-24-matthew-flatt/" target="_blank">that</a> Functional Geekery podcast episode
which features Matthew Flatt talking about the <a href="http://racket-lang.org/" target="_blank">Racket</a> programming
language. Realizing the irony, my thoughts went something like: &ldquo;Racket, tennis?! Can&rsquo;t be a coincidence! Still
some time to burn, so I will programm something tennis-like in
Racket!&rdquo; So let&rsquo;s open the Racket <a href="http://docs.racket-lang.org/quick/" target="_blank">quickstart</a> to somehow learn Racket
and get an idea what the tennis-like thing should be.</p>

<!-- more -->


<p><img class="left" src="http://sleepomeno.github.io/images/court.png" width="200"></p>

<p>The idea came instantly when I saw that Racket offers quite
newbie-friendly picture drawing examples in its tutorial. Now, it&rsquo;s
obvious what I would do, isn&rsquo;t it? Exactly, I would draw a tennis
court! So I <a href="http://download.racket-lang.org/" target="_blank">downloaded</a> Racket and found the executable
for the Racket IDE DrRacket in the <strong>bin</strong> folder of the resulting
directory. Given the examples of the <a href="http://docs.racket-lang.org/quick/" target="_blank">quickstart</a> tutorial I could come
up with that code which got the job done. And it even has (kind of) the blue
color of the US Open hard court ;)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(let* ([color "blue"]
</span><span class='line'>      [blue (lambda (pict) (colorize pict color))]
</span><span class='line'>      [double (blue (filled-rectangle 203 30))]
</span><span class='line'>      [base (blue (filled-rectangle 90 133))]
</span><span class='line'>      [margin 3]
</span><span class='line'>      [doubles (hc-append margin double double)]
</span><span class='line'>      [service (blue (filled-rectangle 110 65))]
</span><span class='line'>      [services (vc-append margin service service)]
</span><span class='line'>      [middle1 (hc-append margin base services)]
</span><span class='line'>      [middle2 (hc-append margin services base)]
</span><span class='line'>      [middles (hc-append margin middle1 middle2)])
</span><span class='line'>    (frame (frame (vc-append margin doubles middles doubles) #:color "white" #:line-width 18) #:color color #:line-width 12))</span></code></pre></td></tr></table></div></figure>


<p>The code can also be found in that <a href="https://gist.github.com/sleepomeno/f8f0af59b19324166619" target="_blank">gist</a>.</p>

<p>Anyway, now the final is about to start, so only a few impressions of
using Racket for the first time: DrRacket proved easy to use and the
<a href="http://docs.racket-lang.org/pict/Basic_Pict_Constructors.html" target="_blank">documentation</a> made it easy to find the right functions for drawing. It
was quite pleasant to see that I could get things done in Racket even
under severe time pressure ;)</p>

<p>Go, Federer!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Historical Elo Tennis Rating]]></title>
    <link href="http://sleepomeno.github.io/blog/2015/09/08/Historical-ELO-Tennis-Rating/"/>
    <updated>2015-09-08T00:00:00+02:00</updated>
    <id>http://sleepomeno.github.io/blog/2015/09/08/Historical-ELO-Tennis-Rating</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve come across <a href="http://fivethirtyeight.com/features/serena-williams-and-the-difference-between-all-time-great-and-greatest-of-all-time/" target="_blank">that fivethirtyeight article</a> comparing the
female tennis all-time greats by means of an  <a href="https://en.wikipedia.org/wiki/Elo_rating_system" target="_blank">Elo rating variant</a> (originally known from chess). It concludes that Serena Williams does
<strong>not</strong> have the highest rating in history, although she is frequently
considered as the greatest player of all time nowadays. Obviously, I
wondered what&rsquo;s the situation like in the men&rsquo;s tennis world. Have
Roger Federer&rsquo;s record 17 Grand Slam wins led to the highest Elo
rating as well? What about players like Borg and McEnroe? Anyway, I
have found surprising results.</p>

<!-- more -->


<h2>Technical approach</h2>

<p><a href="https://github.com/JeffSackmann/tennis_atp" target="_blank">This</a> is where I got the match data on ATP matches from 1968
onwards providing the source of the Elo evaluation in yearly CSV
files. I have adopted the mathematical details of the computation from
<a href="https://en.wikipedia.org/wiki/Elo_rating_system#Mathematical_details" target="_blank">the Elo rating Wikipedia page</a>, while I took the recommendation for the
computation of the <strong>K-factor</strong> from <a href="http://fivethirtyeight.com/features/serena-williams-and-the-difference-between-all-time-great-and-greatest-of-all-time/#fn-3" target="_blank">fivethirtyeight</a>. In addition, I
valued Grand Slam tournament matches higher than other matches
(because of the longer and more challenging best-of-5-sets distance) by
increasing the rating changes resulting from those matches by 10%.
Anyway, I wrote an R script which can be found <a href="https://github.com/sleepomeno/tennis_atp/blob/master/examples/elo.R" target="_blank">here</a>.</p>

<h2>The top 10 highest tennis Elo ratings</h2>

<p>Obviously, the main question is: Who has acquired the highest Elo
rating? The answer is: <span class="underline">Novak Djokovic</span> in May 2015! That&rsquo;s the top 10:</p>

<table class="stat"><thead><tr><th>Rank</th><th>Rating</th><th>Player</th></tr></thead><tbody> <tr><td>1</td><td>2335</td><td>Novak Djokovic</td></tr> <tr><td>2</td><td>2310</td><td>Bjorn Borg</td></tr> <tr><td>3</td><td>2304</td><td>John McEnroe</td></tr> <tr><td>4</td><td>2274</td><td>Rafael Nadal</td></tr> <tr><td>5</td><td>2254</td><td>Roger Federer</td></tr> <tr><td>6</td><td>2253</td><td>Ivan Lendl</td></tr> <tr><td>7</td><td>2191</td><td>Jimmy Connors</td></tr> <tr><td>8</td><td>2168</td><td>Boris Becker</td></tr> <tr><td>9</td><td>2159</td><td>Andy Murray</td></tr> <tr><td>10</td><td>2132</td><td>Pete Sampras</td></tr></tbody></table>


<p>Interesting to see that Borg, McEnroe and Lendl (dominating the 1980s) rank in between the likes of
Djokovic, Nadal and Federer who have dominated the last decade.</p>

<p>Anyway, you might be surprised to see 14-time Grand Slam winner Pete
Sampras only in 10th place. In my opinion, his case demonstrates a <strong>practical</strong>
requirement to get to the top of the above list &ndash; or rather
a lack thereof: High-ranked opponents.</p>

<div style="clear:both">&nbsp;</div>


<h2>Everything is relative &ndash; being the best, too!?</h2>

<p>No matter how good a professional tennis player you are, you will lose
sooner or later &ldquo;because you are human&rdquo; (this is obviously
controversial and Elo does not account for this). When the defeat happens it is
better to lose against higher Elo-rated opponents since you then lose
less points. To put it bluntly: When you have an hypothetical Elo advantage of 1000
points with regard to the next-best player at the start of the season and you win
99 of 100 matches, you will most likely have a worse rating in the end
of that wonderful season due to that one devastating loss!
Consequently, it could be said that Sampras might have lacked high-valued contemporaries to
make an even deeper run. In contrast, Djokovic has benefited from the
high ratings of Nadal and Federer to get to the very top. (Apart from
that, <a href="https://en.wikipedia.org/wiki/Elo_rating_system#Ratings_inflation_and_deflation" target="_blank">Elo inflation</a> might be a reason for higher ratings nowadays, too.) Similarly,
Borg, McEnroe and Lendl have benefited from the strong competition in
boosting their respective peaks. That&rsquo;s why I have looked for a way to
abstract the performance from absolute ratings: I have compared the
margins that the above best players could amass in comparison to the
next-best player at their ratings&#8217; peaks. Thus, it can be analyzed by
what margin a player has been able to set oneself apart from the
competition, which I consider as an indicator as significant as the
maximal Elo rating.</p>

<table class="stat"><thead><tr><th>Gap</th><th>Player</th></tr></thead><tbody> <tr><td>225</td><td>Roger Federer</td></tr> <tr><td>194</td><td>Ivan Lendl</td></tr> <tr><td>181</td><td>Bjorn Borg</td></tr> <tr><td>172</td><td>Novak Djokovic</td></tr> <tr><td>154</td><td>Pete Sampras</td></tr> <tr><td>148</td><td>John McEnroe</td></tr> <tr><td>61</td><td>Rafael Nadal</td></tr> </tbody></table>


<p>In February 2007 Federer reached his rating peak and the next-best
player at that time, Rafael Nadal, trailed 225 Elo points. That event
has marked the biggest gap of the Elo rating&rsquo;s leader and the rest
of the world; a difference of 225 Elo points means a winning chance of
78% for the higher-ranked player. Well, two months later Federer lost to Nadal in the 2007 French
Open final, nevertheless.</p>

<div style="clear:both">&nbsp;</div>


<h2>Conclusion</h2>

<p>No matter whether you &lsquo;prefer&rsquo; the first or the second table &ndash; both
tables shows the current top players count among the best of all
times, however, they don&rsquo;t really outperform the likes of Borg,
McEnroe and Lendl! The R source code for my analysis can be found <a href="https://github.com/sleepomeno/tennis_atp/blob/master/examples/elo.R" target="_blank">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Approximating PI with PureScript]]></title>
    <link href="http://sleepomeno.github.io/blog/2015/03/14/Approximating-PI-with-PureScript/"/>
    <updated>2015-03-14T00:00:00+01:00</updated>
    <id>http://sleepomeno.github.io/blog/2015/03/14/Approximating-PI-with-PureScript</id>
    <content type="html"><![CDATA[<p>Oh, it is Pi day! To be honest, I had not known about it until today
but it somehow made it into my Twitter stream. Well, after some relaxed Saturday morning browsing I stumbled across the <a href="http://demonstrations.wolfram.com/ApproximatingPiWithInscribedPolygons/" target="_blank">Wolfram Pi approximation demonstration</a>. It looks like this:</p>

<script type='text/javascript' src='http://demonstrations.wolfram.com/javascript/embed.js' ></script>


<script type='text/javascript'>var demoObj = new DEMOEMBED(); demoObj.run('ApproximatingPiWithInscribedPolygons', '', '389', '613');</script>


<div id='DEMO_ApproximatingPiWithInscribedPolygons'><a class='demonstrationHyperlink' href='http://demonstrations.wolfram.com/ApproximatingPiWithInscribedPolygons/' target='_blank'>Approximating Pi with Inscribed Polygons</a> from the <a class='demonstrationHyperlink' href='http://demonstrations.wolfram.com/' target='_blank'>Wolfram Demonstrations Project</a> by Rob Morris</div>


<br />


<p>Pi is approximated by computing the area of the inscribed
polygon and by dividing that area by the square of the circle radius &ndash;
after all, the area of a circle is <strong>r²π</strong>. Obviously, that idea is
that beautiful and so simple that Pi has thus been approximated thousands of
years ago (of course, there are many better and faster ways!), so
I decided to implement it myself.</p>

<!-- more -->


<h2>PureScript</h2>

<p>Some days ago I stumbled across <strong>PureScript</strong> which compiles to
JavaScript. It is heavily influenced by Haskell and shares its quality
of static typing. However, it has been designed to target JavaScript
from the getgo such that it incorporates the strict evaluation
semantics of JavaScript. In addition, it provides a syntax similar to
native JavaScript for accessing object properties. Given some Haskell knowledge,
PureScript seems to be a decent alternative to Fay or Haste for
creating Javascript code! So I thought I would give
it a try and implement something similar to the above Wolfram
demonstration! So this is the result I accomplished after one day&rsquo;s
work on a <a href="http://sleepomeno.github.io/pi/html/index.html" target="_blank">PureScript clone</a>:</p>

<iframe src="http://sleepomeno.github.io/pi/html/index.html" width="500" height="720" style="margin:auto;display:block"></iframe>


<h3>PureScript learning resources</h3>

<p>First of all these are the best resources on PureScript development that I found:</p>

<ul><li>

<a href="https://gist.github.com/paf31/8e9177b20ee920480fbc" target="_blank">24 days of PureScript</a>

</li><li>

<a href="https://leanpub.com/purescript" target="_blank">PureScript by Example</a> - very detailed but excellent!

</li><li>

<a href="https://github.com/purescript/purescript/wiki" target="_blank">PureScript Wiki</a> 

</li></ul>


<p><a href="https://gist.github.com/paf31/8e9177b20ee920480fbc" target="_blank">24 days of PureScript</a> gives a very good overview of the PureScript
library landscape. Above all, running code for every introduced
library is given which is crucial to getting quickly started. In
addition, there is a project called <a href="http://pursuit.purescript.org/" target="_blank">Pursuit</a> which provides a search
engine for functions of PureScript packages. It is still far from
being as useful as Hoogle or Hayoo for Haskell development, though.</p>

<h2>PureScript libraries and building process</h2>

<p>PureScript libraries are managed by <strong>bower</strong> which has worked
surprisingly well for me. However, at the beginning I had problems getting the interpreter <code>psci</code> running with
all dependencies as I&rsquo;m not used to <strong>grunt</strong> (and <strong>npm</strong>) which are
typically needed in the whole building process. Anyway, when I decided
to use certain PureScript libraries for my implementation their
integration worked like a charm!</p>

<h2>HTML5 Canvas bindings</h2>

<p>PureScript has very decent wrappers of the HTML5 Canvas API in form
of <code>purescript-canvas</code> and <code>purescript-free-canvas</code>. Obviously, I made
heavy use of those to get the circle and the polygon drawn.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">center</span> <span class="ow">=</span> <span class="p">{</span> <span class="n">x</span> <span class="kt">:</span> <span class="mi">210</span><span class="p">,</span> <span class="n">y</span> <span class="kt">:</span> <span class="mi">210</span> <span class="p">}</span>
</span><span class='line'><span class="nf">drawCircle</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="n">arc</span> <span class="p">{</span> <span class="n">x</span><span class="kt">:</span> <span class="n">center</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="kt">:</span> <span class="n">center</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">r</span><span class="kt">:</span> <span class="n">radius</span><span class="p">,</span> <span class="n">start</span><span class="kt">:</span> <span class="mi">0</span><span class="p">,</span> <span class="n">end</span><span class="kt">:</span> <span class="kt">Math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">setFillStyle</span> <span class="s">&quot;#000000&quot;</span>
</span><span class='line'>  <span class="n">fill</span>
</span></code></pre></td></tr></table></div></figure>


<p>As an argument to <code>arc</code> we actually have an example of the <em>Object</em>
syntax of PureScript which is just like native JavaScript.</p>

<h2>Angular, React or something else?</h2>

<p>PureScript does have bindings to AngularJS and React (find PureScript
libraries by <a href="http://bower.io/search/?q=purescript" target="_blank">searching bower</a>), however, they are both still
experimental and alpha. So I somehow didn&rsquo;t want to commit to something
half-working which could be very hard to understand for a PureScript
newbie like me. Anyway, I decided that the JQuery binding of
<code>purescript-jquery</code> should be enough for my Pi approximation application; in the end, I
also used <code>purescript-rx</code> (also mentioned on <a href="https://gist.github.com/paf31/8e9177b20ee920480fbc" target="_blank">24 days of PureScript)</a>
but I only scratched the surface of reactive PureScript UI modelling.</p>

<h2>What about the slider?</h2>

<p>I definitely wanted a fancy slider for setting the number of vertices
of the polygon like in the Wolfram demo &ndash; without
too much ado, I immediately decided on using the vanilla <a href="http://jqueryui.com/slider/" target="_blank">JQuery-UI
slider</a>. Copy-Paste. That however means that my PureScript has to
somehow interact with the native slider JavaScript.</p>

<h2>The main function</h2>

<p>The first few lines are about getting representations of the HTML
elements with <code>purescript-jquery</code>. Then I define event handlers for
changing the number of vertices and for toggling the checkbox to
show/hide the triangles. <code>onAsObservable</code> actually is from the
<code>purescript-rx</code> binding to the reactive <a href="https://github.com/Reactive-Extensions/RxJS" target="_blank">RxJS</a> libraries which could be
used to define complex event handling.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="n">canvas</span> <span class="ow">&lt;-</span> <span class="n">getCanvasElementById</span> <span class="s">&quot;canvas&quot;</span>
</span><span class='line'>  <span class="n">context</span> <span class="ow">&lt;-</span> <span class="n">getContext2D</span> <span class="n">canvas</span>
</span><span class='line'>  <span class="n">verticesInput</span> <span class="ow">&lt;-</span> <span class="n">select</span> <span class="s">&quot;#vertices&quot;</span>
</span><span class='line'>  <span class="n">polygonArea</span> <span class="ow">&lt;-</span> <span class="n">select</span> <span class="s">&quot;#polygonArea&quot;</span>
</span><span class='line'>  <span class="n">pi</span> <span class="ow">&lt;-</span> <span class="n">select</span> <span class="s">&quot;#pi&quot;</span>
</span><span class='line'>  <span class="n">triangles</span> <span class="ow">&lt;-</span> <span class="n">select</span> <span class="s">&quot;#triangles&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">let</span> <span class="n">updateUI</span> <span class="n">num</span> <span class="n">showTriangles</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>      <span class="p">{</span> <span class="n">pArea</span> <span class="kt">:</span> <span class="n">polygonAreaPercent</span><span class="p">,</span> <span class="n">pi</span> <span class="kt">:</span> <span class="n">piApprox</span> <span class="p">}</span> <span class="ow">&lt;-</span> <span class="n">showPolygon</span> <span class="n">canvas</span> <span class="n">context</span> <span class="n">num</span> <span class="n">showTriangles</span>
</span><span class='line'>      <span class="n">setText</span> <span class="p">(</span><span class="n">show</span> <span class="n">polygonAreaPercent</span> <span class="o">&lt;&gt;</span> <span class="s">&quot;%&quot;</span><span class="p">)</span> <span class="n">polygonArea</span>
</span><span class='line'>      <span class="n">setText</span> <span class="p">(</span><span class="n">show</span> <span class="n">piApprox</span><span class="p">)</span> <span class="n">pi</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">updateUI&#39;</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>        <span class="n">showTriangles</span> <span class="ow">&lt;-</span> <span class="p">((</span><span class="o">==</span> <span class="s">&quot;true&quot;</span><span class="p">)</span> <span class="o">&lt;&lt;&lt;</span> <span class="n">stringify</span><span class="p">)</span> <span class="o">&lt;$&gt;</span> <span class="n">getProp</span> <span class="s">&quot;checked&quot;</span> <span class="n">triangles</span>
</span><span class='line'>        <span class="n">num</span> <span class="ow">&lt;-</span> <span class="p">(</span><span class="n">stringify</span> <span class="o">&gt;&gt;&gt;</span> <span class="n">readInt</span> <span class="mi">10</span><span class="p">)</span> <span class="o">&lt;$&gt;</span> <span class="n">getValue</span> <span class="n">verticesInput</span>
</span><span class='line'>        <span class="n">updateUI</span> <span class="n">num</span> <span class="n">showTriangles</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">trianglesChange</span> <span class="ow">&lt;-</span> <span class="s">&quot;click&quot;</span> <span class="p">`</span><span class="n">onAsObservable</span><span class="p">`</span> <span class="n">triangles</span>
</span><span class='line'>  <span class="n">trianglesChange</span> <span class="p">`</span><span class="n">subscribe</span><span class="p">`</span> <span class="nf">\</span><span class="kr">_</span> <span class="ow">-&gt;</span> <span class="n">void</span> <span class="n">updateUI&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">verticesChange</span> <span class="ow">&lt;-</span> <span class="s">&quot;focus&quot;</span> <span class="p">`</span><span class="n">onAsObservable</span><span class="p">`</span> <span class="n">verticesInput</span>
</span><span class='line'>  <span class="n">verticesChange</span> <span class="p">`</span><span class="n">subscribe</span><span class="p">`</span> <span class="nf">\</span><span class="kr">_</span> <span class="ow">-&gt;</span> <span class="n">void</span> <span class="n">updateUI&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">updateUI</span> <span class="n">defaultVertices</span> <span class="n">defaultShowTriangles</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The Foreign Function Interface</h2>

<p>In the above code I accessed the current value of the checkbox and the
slider value with the <code>purescript-jquery</code> functions <code>getValue</code> and
<code>getProp</code>. However, it was surprisingly difficult to use those values
as they were not of type <code>String</code> but <code>Foreign</code> and I got those
dragged into the field of the Foreign Function Interface for
communicating with JavaScript code. Anyway, after some digging in I
ended up writing the function <code>stringify</code> which trivially transforms the
incoming Javascript value to a <code>String</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foreign</span> <span class="kr">import</span> <span class="nn">stringify</span>
</span><span class='line'>  <span class="s">&quot;function stringify(x) {</span><span class="se">\</span>
</span><span class='line'><span class="se">  \</span><span class="s">  return x+</span><span class="se">\&quot;\&quot;</span><span class="s">;</span><span class="se">\</span>
</span><span class='line'><span class="se">  \</span><span class="s">}&quot;</span> <span class="ow">::</span> <span class="kt">Foreign</span> <span class="ow">-&gt;</span> <span class="kt">String</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s an example of how you can integrate JavaScript functions in
PureScript. It is a little bit of a joke as of now sice you need to add all
those backslashes, however, things might get easier in case PureScript
gets a meta programming facility like <strong>TemplateHaskell</strong> in the Haskell
world in the future.</p>

<h2>Conclusion</h2>

<p>All in all, PureScript really makes a nice impression. There is already
a surprising number of libraries available; decent, mature bindings to
Angular or React would be crucial for getting easy web development
adoption, though. Meta programming integration of JavaScript code would
also prove very nice as would be Source Map support&#x2026; anyway, I&rsquo;m
looking forward to using it again and might get into improving it myself.</p>

<p>PS: You find the code for the PureScript application on <a href="https://github.com/sleepomeno/InscribePolygons" target="_blank">my GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Partial matching in R]]></title>
    <link href="http://sleepomeno.github.io/blog/2015/02/20/Partial-matching-in-R/"/>
    <updated>2015-02-20T00:00:00+01:00</updated>
    <id>http://sleepomeno.github.io/blog/2015/02/20/Partial-matching-in-R</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve not been too exposed to statistics programming in the last few
year, however, sometimes it couldn&rsquo;t be avoided &ndash; and R couldn&rsquo;t be
avoided! (I still have too much self-esteem to think about
falling back to Excel, even for the simplest things.)</p>

<p>I don&rsquo;t hate R and I don&rsquo;t like R; it just strikes me as very
<strong>strange</strong>. Often, the syntax strikes me as odd and above all, the
multitude of ways to express the same thing reminds of my little Perl
experience. Anyway, I have subscribed to the Coursera R course for fun
and in hope to somehow &ldquo;get the better of R&rdquo;, to grok in on a deep
level or to at least get a more profound idea as to why I don&rsquo;t like it ;)</p>

<p>Anyway, here is a language construct which is very <strong>strange</strong> and a
little bit absurd, no whatever how often I think about it. It&rsquo;s called
<span class="underline">partial matching</span>. To put it bluntly, partial matching makes it
possible to avoid spelling out the whole name of an element of a list
in oder to access it. Let&rsquo;s have a look.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>x <span class="o">&lt;-</span> list<span class="p">(</span>a_is_the_first_letter <span class="o">=</span> <span class="m">1</span> <span class="o">:</span> <span class="m">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s access <code>a_is_the_first_letter</code>! That&rsquo;s the normal way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>x<span class="o">$</span>a_is_the_first_letter
</span><span class='line'><span class="c1"># 1 2 3 4 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, you could make your life a lot &ldquo;easier&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>x<span class="o">$</span>a
</span><span class='line'><span class="c1"># 1 2 3 4 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, the crucial question is: what happens if the prefix of your
partial matching is not unique?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>x <span class="o">&lt;-</span> list<span class="p">(</span>a_is_the_first_letter <span class="o">=</span> <span class="m">1</span> <span class="o">:</span> <span class="m">5</span><span class="p">,</span>
</span><span class='line'>          a_is_my_first_letter_too <span class="o">=</span> <span class="m">6</span> <span class="o">:</span> <span class="m">10</span><span class="p">)</span>
</span><span class='line'>x<span class="o">$</span>a
</span><span class='line'><span class="c1"># NULL</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result is <code>NULL</code>!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>x <span class="o">&lt;-</span> list<span class="p">(</span>a_is_the_first_letter <span class="o">=</span> <span class="m">1</span> <span class="o">:</span> <span class="m">5</span><span class="p">,</span>
</span><span class='line'>          a_is_my_first_letter_too <span class="o">=</span> <span class="m">6</span> <span class="o">:</span> <span class="m">10</span><span class="p">)</span>
</span><span class='line'>x<span class="o">$</span>a_is_m
</span><span class='line'><span class="c1"># 6 7 8 9 10</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here the prefix is unique again. Hooray!</p>

<p>Funny, isn&rsquo;t it? I don&rsquo;t like it, though. Why? Because it&rsquo;s not &lsquo;obvious&rsquo;.
You need to know that feature beforehand, otherwise the fact that an
accidentally misspelled field is handled the same way as a non-unique
field prefix (both returning <code>NULL</code>) is awkward, to say the least.
It&rsquo;s nearly as though I said to the R interpreter: &lsquo;Give me field
xy or any field that is somehow similar&#x2026; or just do what you fucking
want (= return NULL)!&rsquo; Anyway, it introduces complexity and indeterminism into the code.</p>

<p>There is another twist to partial matching. Of course, there is more
than one way to access a field of a list. Making use of the double bracket
syntax, that feature of partial matching is handled differently.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>x <span class="o">&lt;-</span> list<span class="p">(</span>a_is_the_first_letter <span class="o">=</span> <span class="m">1</span> <span class="o">:</span> <span class="m">5</span><span class="p">)</span>
</span><span class='line'>x<span class="p">[[</span><span class="s">&quot;a&quot;</span><span class="p">]]</span>
</span><span class='line'><span class="c1"># NULL</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the double bracket field accessing method, partial matching is
not the default. But R is perly so you still have a way to get that
behavior in a different way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>x<span class="p">[[</span><span class="s">&quot;a&quot;</span><span class="p">,</span> exact <span class="o">=</span> <span class="kc">FALSE</span><span class="p">]]</span>
</span><span class='line'><span class="c1"># 1 2 3 4 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>At least I now have a better idea why I don&rsquo;t really like R. It
introduces a sort of laisser-faire programming which I consider too
&ldquo;inexact&rdquo;. I mean, would you really want something like the following to be the
future of programming:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">God</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">killMankind</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">keepUpTheGoodWork</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="n">god</span><span class="o">.</span><span class="na">k</span><span class="o">()</span> <span class="c1">// What the hell happens? Who cares.</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preview your Github Markdown before committing!]]></title>
    <link href="http://sleepomeno.github.io/blog/2015/01/19/Preview-your-Github-Markdown-before-committing/"/>
    <updated>2015-01-19T00:00:00+01:00</updated>
    <id>http://sleepomeno.github.io/blog/2015/01/19/Preview-your-Github-Markdown-before-committing</id>
    <content type="html"><![CDATA[<p>Writing software documentation can be a pretty dull task and is
neglected too often (at least by me). But what purpose does the best program
serve if nobody knows how to use it? None.</p>

<p>Looking at Github, the Markdown formatted <strong>README.md</strong> is the front
 page of every repository and the first (and mostly only) source of
 documentation.
Until recently, I have treated my <strong>README.md</strong> files rather shabbily; I
 would have thought that this lack of motivation originates from a
 general dislike of writing documentation, however, I might have
 changed my opinion. This <a href="http://increasinglyfunctional.com/2014/12/18/github-flavored-markdown-previews-emacs/" target="_blank">blog post</a> has opened my eyes to an
 alternative explanation: writing Github Markdown documentation is not
 trivial when you don&rsquo;t have a chance to preview the resulting
 markdown before committing! In that case the output will look
 not as expected more often than not &ndash; which makes the committer angry
 as s/he needs to push another commit just for improving the Markdown.
 Anyway, I remember feeling annoyed quite frequently by that procedure in
 retrospective. It does not need a stretch of imagination to foresee
 the negative influence that annoyance has on my willingness to
 provide <strong>README.md</strong> documentation&#x2026; ;)</p>

<p>The solution is obvious but not that trivial. Obviously, there surely
are plugins for various IDEs which can parse Markdown and output HTML
markup. I remember having once installed such an Eclipse plugin. But things get trickier as Github does not use vanilla
Markdown but its own brand of Markdown &ndash; it is not that easy to find a
way to display Github Markdown with good confidence in its conformity;
in addition it shouldn&rsquo;t force me to use any special IDE as I do most
stuff in Emacs.</p>

<p>The script that I use now was mentioned in the referenced blog post
above: <a href="https://gist.github.com/joshuamiller/6d58f8bd239df56cabe8" target="_blank">flavor.rb</a>. It is a ruby script which actually asks the Github API (!) to do the hard
work, namely providing the HTML output! That looks stupid at first
glance but it is actually the only way to be really sure of the
preview&rsquo;s congruence with the actual display on the Github page&#x2026;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[else return null]]></title>
    <link href="http://sleepomeno.github.io/blog/2015/01/05/else-return-null/"/>
    <updated>2015-01-05T00:00:00+01:00</updated>
    <id>http://sleepomeno.github.io/blog/2015/01/05/else-return-null</id>
    <content type="html"><![CDATA[<p>I guess everybody has a story or two in store about Nullpointer
exceptions in Java (or in any language with nullable values). Sooner or later you will make the acquaintance of the dreaded stacktrace line
denoting that you did something terribly wrong, demanding a value
where none exists, and you just wonder <em>why, how the hell can that
object be null?!</em> during an hour of painful debugging&#x2026; you know
that? Good. Well, I won&rsquo;t ponder over how to avoid it, how to apply
proper error handling etc. (that&rsquo;s way too complicated, I&rsquo;m tired) but I&rsquo;d just like to point out my personal
favourite, the
famous <code>else return null</code> idiom.</p>

<!-- more -->


<p>Anyway, the below snippet shows what I actually mean by that.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Version 1</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">password</span> <span class="o">==</span> <span class="s">&quot;12345&quot;</span><span class="o">)</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">valuableTreasure</span><span class="o">;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>   <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// or, equivalently</span>
</span><span class='line'><span class="c1">// Version 2</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">password</span> <span class="o">==</span> <span class="s">&quot;12345&quot;</span><span class="o">)</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">valuableTreasure</span><span class="o">;</span>
</span><span class='line'><span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To make things more familiar, in Version 2 you could imagine multiple <code>return null</code> lines hidden in
various control structures in an endless method and you surely get an idea
how people feel when they try to reason about an object being <em>null</em>
or not.
Anyway, spotting an <code>else return null</code> I always get a bad gut feeling
saying that things are not what they are supposed to be. I&rsquo;m aware
that this obviously touches upon the question if you should avoid
<em>null</em> values altogether. Anyway, I can&rsquo;t help my bad gut feeling
whenever I see it ;)</p>

<p>The funny thing is that I recently wrote similar code myself; that
alone would not be a surprise yet, but I actually wrote it in
Haskell which does not have that notion of <em>null</em> values and the
corresponding Nullpointer exception. In Haskell, there is the <a href="https://www.haskell.org/haskellwiki/Maybe" target="_blank">Maybe monad</a> which facilitates chaining &ldquo;partial&rdquo; computations together without
the risk of a Nullpointer exception. Here is the snippet of that code
(obviously, only the <code>else Nothing</code> is &lsquo;important&rsquo;).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">newState</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">if</span> <span class="n">not</span> <span class="n">shouldBeCompiled</span> <span class="o">&amp;&amp;</span> <span class="n">w&#39;</span> <span class="o">==</span> <span class="n">view</span> <span class="kt">T</span><span class="o">.</span><span class="n">word</span> <span class="kt">W</span><span class="o">.</span><span class="n">immediate&#39;</span> <span class="kr">then</span>
</span><span class='line'>   <span class="p">(</span><span class="n">oldState</span> <span class="o">^.</span> <span class="n">lastColonDefinition</span> <span class="p">)</span> <span class="o">&gt;&gt;=</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">\</span><span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">return</span> <span class="o">$</span> <span class="n">oldState</span> <span class="o">&amp;</span> <span class="n">definedWords</span> <span class="o">%~</span> <span class="p">(</span><span class="n">ix</span> <span class="n">x</span> <span class="o">%~</span> <span class="n">set</span> <span class="n">isImmediate</span> <span class="kt">True</span><span class="p">))</span>
</span><span class='line'>  <span class="kr">else</span>
</span><span class='line'>   <span class="kt">Nothing</span>
</span></code></pre></td></tr></table></div></figure>


<p>Anyway, believe me, if you ever write such an <code>else Nothing</code> in Haskell, that should
be the trigger &ndash; take a deep breath, take a coffee and think about your
problem again. At the least, you are overcomplicating things as using
the <em>Monad</em> or <em>MonadPlus</em> nature of <em>Maybe</em> would make life easier
but probably it&rsquo;s an indication that your thoughts are about to go
astray and you get lost in old <code>else return null</code> habits or worse &ndash; so better
stop it and take a break!</p>

<p>How would the <em>MonadPlus</em> and <em>Monad</em> instances make life better? Look
at the below version. In any case, it&rsquo;s functionally equivalent, so
how would it be &lsquo;better&rsquo;? In my opinion, it conveys much
more the impression that the programmer actually knows what they are doing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">newState</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="n">guard</span> <span class="o">$</span> <span class="n">not</span> <span class="n">shouldBeCompiled</span> <span class="o">&amp;&amp;</span> <span class="n">w&#39;</span> <span class="o">==</span> <span class="p">(</span><span class="n">view</span> <span class="kt">T</span><span class="o">.</span><span class="n">word</span> <span class="kt">W</span><span class="o">.</span><span class="n">immediate&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span> <span class="ow">&lt;-</span> <span class="n">oldState</span> <span class="o">^.</span> <span class="n">lastColonDefinition</span>
</span><span class='line'>  <span class="n">return</span> <span class="o">$</span> <span class="n">oldState</span> <span class="o">&amp;</span> <span class="n">definedWords</span> <span class="o">%~</span> <span class="p">(</span><span class="n">ix</span> <span class="n">x</span> <span class="o">%~</span> <span class="n">set</span> <span class="n">isImmediate</span> <span class="kt">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Essentially, the <code>guard</code> function does the trick. <code>guard</code>, which has the type
<em>guard :: MonadPlus m => Bool &ndash;> m ()</em>, makes the containing <em>do</em>
block evaluate to <code>Nothing</code> if the <code>Bool</code> argument evaluates to
<code>False</code>. In that sense, the <code>guard</code> expression actually looks like an
assertion! The whole <em>MonadPlus</em> magic can be further explored <a href="http://en.wikibooks.org/wiki/Haskell/MonadPlus" target="_blank">here</a>.</p>

<p>In my case, I finally ended up removing those lines altogether. As suspected, the
good old <code>else Nothing</code> was the symptom that I had lost track of
what I was coding at all &ndash; completely lost in nothingness &ndash; and I really needed a
break.</p>

<p>So what is your typical &lsquo;silly code&rsquo; that you typically start writing when
you should rather take a break?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using XMonad with a projector]]></title>
    <link href="http://sleepomeno.github.io/blog/2014/11/07/Using-XMonad-with-a-projector/"/>
    <updated>2014-11-07T00:00:00+01:00</updated>
    <id>http://sleepomeno.github.io/blog/2014/11/07/Using-XMonad-with-a-projector</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using XMonad for a few years now (lately in combination with
GNOME) but just recently I have found a way to make it work in a useful way
in the context of a presentation with a projector as a second screen.</p>

<p>In general, XMonad does have decent multi-screen support. Building on
Xinerama, the default configuration provides key-binding support for
three screens; how workspaces are mapped to the screens and how this
mapping can change, respectively, can be pretty confusing at first, though &ndash;
it is best explained in <a href="http://www.reddit.com/r/xmonad/comments/ndww5/dual_screens_multi_monitors_tips_and_tricks/c38dsfx" target="_blank">here</a>. Whenever I want to use a projector
things get pretty tricky, however.</p>

<!-- more -->


<p>The thing is: Using a projector as a second screen, I want to have
exactly the same workspace (accordingly the same windows, same layout,
obviously) on both screens. Apparently, I could do that by &lsquo;mirroring&rsquo;
the screens and thus circumventing XMonad multi-screen support. I&rsquo;m
not too happy with it, though, as, for some reason, I can&rsquo;t get <em>xrandr</em>
make show a reasonable resolution on both screens in that scenario &ndash;
part of what is shown on own screen is hidden on the other. Disabling
mirroring, however, it is <strong>impossible</strong> for XMonad to show exactly the
same on both screens &ndash; obviously, this is a restriction imposed by
Xinerama as it manages all workspaces across screens as <em>one</em>
large workspace under the hood.</p>

<p>The cure for that disease is the trick I found in another reddit
thread:
<a href="http://www.reddit.com/r/xmonad/comments/2ha25r/same_workspaces_on_multiple_monitors_without/ckrobfj" target="_blank">same workspaces on multiple monitors</a>.
So let&rsquo;s assume the following setup: Workspace 1 is shown on your
projector screen, Workspace 2 is shown on your internal screen. You
start a VNC server on workspace 1 on localhost:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x11vnc -usepw -clip xinerama0 -noxdamage -geometry 1920x1080</span></code></pre></td></tr></table></div></figure>


<p>(You might need to replace &lsquo;xinerama0&rsquo; by &lsquo;xinerama1&rsquo;. &lsquo;1920x1080&rsquo;
conforms to the resolution of my internal screen. &lsquo;-noxdamage&rsquo; is
optional but seems to be recommended.)</p>

<p>On Workspace 2 you start a VNC client:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vncviewer ViewOnly=1 UseLocalCursor=0 localhost:0</span></code></pre></td></tr></table></div></figure>


<p>(Again you might need to replace &lsquo;localhost:0&rsquo; by &lsquo;localhost:1&rsquo;.)</p>

<p>Well, now you get to see your projected presentation on your internal screen,
too, showing the X display of your VNC server screen! Move to Workspace 1 and start your presentation (or your live
coding, for example) while you actually watch your presentation on your internal screen on Workspace
2! As a bonus, during your presentation you could easily do things
which are not intended to be shown by the projector and/or move
windows from an internal workspace to Workspace 1 when they need to be shown.</p>

<p>Starting the vncviewer with the &lsquo;ViewOnly&rsquo; option makes it necessary
that you actually make your live in-presentation changes on Workspace
1, as I said (while watching your own changes on Workspace 2 on your
internal screen). That&rsquo;s my recommendation anyway, in my experience the viewer setup thus works more
stable and some keyboard inputs wouldn&rsquo;t be translated correctly from
the viewer to the server using a non-ViewOnly mode.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Google Universal Analytics with Octopress]]></title>
    <link href="http://sleepomeno.github.io/blog/2014/08/16/Using-Google-Universal-Analytics-with-Octopress/"/>
    <updated>2014-08-16T00:00:00+02:00</updated>
    <id>http://sleepomeno.github.io/blog/2014/08/16/Using-Google-Universal-Analytics-with-Octopress</id>
    <content type="html"><![CDATA[<p>When I first set up my Github pages Octopress blog I followed <a href="http://stefanalfbo.github.io/blog/2013/04/17/octopress-google-analytics-github-pages/" target="_blank">those
instructions</a> to set Google Analytics tracking up &ndash; and it worked. However, in May Google
Analytics somehow decided to move my account to <em>Universal
Analytics</em> &ndash; maybe I had approved it without really knowing what it
meant&#x2026;</p>

<p>Well, what is <em>Universal Analytics</em>? I have no idea! The
important thing to notice is, though, that you need to change your
JavaScript <strong>tracking code</strong> if you make that transition; obviously, I
didn&rsquo;t know that. Otherwise tracking wouldn&rsquo;t work any longer; would
it? As a matter of fact, it <em>somehow</em> did.</p>

<blockquote><p>It is not only not right, it is not even wrong.</p><footer><strong>Wolfgang Pauli</strong></footer></blockquote>


<p>Actually, my Analytics dashboard <strong>did</strong> show some visits and hits, that&rsquo;s
why I didn&rsquo;t notice the problem for a long time, however, I guess it
only mentioned 10% of them! Anyway, after a long
debugging session with <a href="https://www.google.at/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0CCAQFjAA&url=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Ftag-assistant-by-google%2Fkejbdjndbnbjgmefkgdddjlbokphdefk&ei=xivvU6rFCoTE7AbJ54GgBw&usg=AFQjCNHiOEtvqJl1-RFk6_Q6oVWZTGRFPw&sig2=cuQ2UpUVHzSDJBg77fP0hw&bvm=bv.73231344,d.ZGU" target="_blank">Google Tag Assistant</a> and <a href="https://www.google.at/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0CCAQFjAA&url=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Fgoogle-analytics-debugger%2Fjnkmfdileelhofjcijamephohjechhna&ei=NizvU-u2Nef17AaSp4CIAg&usg=AFQjCNHR1yQN0Rdzn4xwMA1bTPZkNEGK_Q&sig2=CEZMIArRE6i7HVQLoSVTiQ&bvm=bv.73231344,d.ZGU" target="_blank">Google Analytics Debugger</a> I figured out the necessity to change the code, finally.</p>

<p>Shortly, you just need to change your
<code>source/_includes/google_analytics.html</code> to this code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% if site.google_analytics_tracking_id %}
</span><span class='line'>  &lt;script type="text/javascript">
</span><span class='line'>    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
</span><span class='line'>(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
</span><span class='line'>m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
</span><span class='line'>})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
</span><span class='line'>
</span><span class='line'>ga('create', '{{ site.google_analytics_tracking_id }}', 'auto');
</span><span class='line'>ga('send', 'pageview');
</span><span class='line'>  &lt;/script>
</span><span class='line'>{% endif %}</span></code></pre></td></tr></table></div></figure>


<p>Concerning Github pages, it&rsquo;s not necessary to include a call to set your domain to
<strong>github.io</strong> any longer. It just works out of the box &ndash; what a
progress! It is not only right, it is not even wrong now!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The notoriously point-free "((x.).)" trick]]></title>
    <link href="http://sleepomeno.github.io/blog/2014/08/14/Composing-two-argument-functions/"/>
    <updated>2014-08-14T00:00:00+02:00</updated>
    <id>http://sleepomeno.github.io/blog/2014/08/14/Composing-two-argument-functions</id>
    <content type="html"><![CDATA[<p><a href="http://www.haskell.org/haskellwiki/Pointfree" target="_blank">Point-free</a> code is ubiquitous in every well-polished Hackage library.
It&rsquo;s more concise than its pointed counterparts and feels more
&ldquo;hygienic&rdquo; as function composition immediately translates to its
mathematical background.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">let</span> <span class="n">pointFree</span> <span class="ow">=</span> <span class="p">(</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">.</span> <span class="n">read</span>
</span><span class='line'><span class="kr">let</span> <span class="n">notPointFree</span> <span class="n">x</span> <span class="ow">=</span> <span class="p">(</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="n">read</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="c1">-- notPointFree &#39;mentions&#39; its argument &quot;x&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So far, so good. However, you get a problem in your chain of function
composition when your right-most function &ldquo;takes two parameters&rdquo;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">let</span> <span class="n">plusOne</span> <span class="ow">=</span> <span class="p">(</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class='line'><span class="kr">let</span> <span class="n">readTwoArgs</span> <span class="ow">=</span> <span class="p">(</span><span class="nf">\</span><span class="n">x</span> <span class="n">y</span> <span class="ow">-&gt;</span> <span class="n">read</span> <span class="n">x</span> <span class="o">+</span> <span class="n">read</span> <span class="n">y</span><span class="p">)</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class='line'>
</span><span class='line'><span class="kr">let</span> <span class="n">coolSolution</span> <span class="ow">=</span> <span class="n">plusOne</span> <span class="o">.</span> <span class="n">readTwoArgs</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class='line'><span class="c1">-- Type checker doesn&#39;t like coolSolution</span>
</span><span class='line'>
</span><span class='line'><span class="kr">let</span> <span class="n">boringSolution</span> <span class="n">x</span> <span class="n">y</span> <span class="ow">=</span> <span class="n">plusOne</span> <span class="p">(</span><span class="n">readTwoArgs</span> <span class="n">x</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="c1">-- it&#39;s boring since it&#39;s not point-free</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, <code>coolSolution</code> is not well-typed; this might drive you
nuts for some time: It&rsquo;s obvious that composing those functions must
somehow work. You&rsquo;d think: &ldquo;Even GHCI must have understood what I
mean!&rdquo; However, Haskell doesn&rsquo;t care for what you mean as much as it
cares for type-safety ;) ! So you might fall back on <code>boringSolution</code>
which is only half the fun as it&rsquo;s not point-free&#x2026; anyway, there IS
a way to compose those functions!</p>

<!-- more -->


<p>In the following I will use
<a href="http://www.haskell.org/haskellwiki/GHC/TypedHoles" target="_blank">Typed holes</a>. They are a nice tool to look into the type checker&rsquo;s
&ldquo;thoughts&rdquo;.
Well, first have a look at why <code>coolSolution</code> did not type-check at all.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Couldn't match type ‘Int’ with ‘String -> Int’
</span><span class='line'>    Expected type: Int -> String -> Int
</span><span class='line'>      Actual type: Int -> Int
</span><span class='line'>    In the first argument of ‘(.)’, namely ‘plusOne’
</span><span class='line'>    In the expression: plusOne . readTwoArgs :: String -> String -> Int</span></code></pre></td></tr></table></div></figure>


<p>Essentially, this tells us that <code>plusOne</code> does not have the right type
to be used together with <code>(. readTwoArgs)</code>. Now let&rsquo;s ask this
question to the type checker: What do I need to apply to <code>plusOne</code> so
that you are happy?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="p">((</span><span class="kr">_</span> <span class="n">plusOne</span><span class="p">)</span> <span class="o">.</span> <span class="n">readTwoArgs</span><span class="p">)</span> <span class="s">&quot;3&quot;</span> <span class="s">&quot;2&quot;</span> <span class="ow">::</span> <span class="kt">Int</span>
</span></code></pre></td></tr></table></div></figure>


<p>The answer we get is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Found hole ‘_’
</span><span class='line'>      with type: (Int -> Int) -> (String -> Int) -> [Char] -> Int
</span><span class='line'>    Relevant bindings include it :: Int (bound at &lt;interactive>:88:1)
</span><span class='line'>    In the expression: _
</span><span class='line'>    In the first argument of ‘(.)’, namely ‘(_ plusOne)’
</span><span class='line'>    In the expression: (_ plusOne) . readTwoArgs</span></code></pre></td></tr></table></div></figure>


<p>Okay, this help us. Our &ldquo;hole function&rdquo;&rsquo;s type is <code>(Int -&gt; Int) -&gt;
(String -&gt; Int) -&gt; [Char] -&gt; Int</code>. Now we just write that
function &ndash; actually, the type signature and our knowledge of what
should be the result of the whole expression give rise to that <em>unique</em> <code>holeFunction</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">let</span> <span class="n">holeFunction</span> <span class="n">plusOne&#39;</span> <span class="n">stringToInt</span> <span class="n">string</span> <span class="ow">=</span> <span class="n">plusOne&#39;</span> <span class="p">(</span><span class="n">stringToInt</span> <span class="n">string</span><span class="p">)</span>
</span><span class='line'><span class="kr">let</span> <span class="n">holeFunction</span> <span class="n">plusOne&#39;</span> <span class="n">stringToInt</span> <span class="n">string</span> <span class="ow">=</span> <span class="n">plusOne&#39;</span> <span class="o">.</span> <span class="n">stringToInt</span> <span class="o">$</span> <span class="n">string</span>
</span><span class='line'><span class="kr">let</span> <span class="n">holeFunction</span> <span class="n">plusOne&#39;</span> <span class="n">stringToInt</span> <span class="ow">=</span> <span class="n">plusOne&#39;</span> <span class="o">.</span> <span class="n">stringToInt</span>
</span><span class='line'><span class="kr">let</span> <span class="n">holeFunction</span> <span class="n">plusOne&#39;</span> <span class="n">stringToInt</span> <span class="ow">=</span> <span class="p">(</span><span class="o">.</span><span class="p">)</span> <span class="n">plusOne&#39;</span> <span class="n">stringToInt</span>
</span><span class='line'><span class="kr">let</span> <span class="n">holeFunction</span> <span class="n">plusOne&#39;</span> <span class="ow">=</span> <span class="p">(</span><span class="o">.</span><span class="p">)</span> <span class="n">plusOne&#39;</span>
</span><span class='line'><span class="kr">let</span> <span class="n">holeFunction</span> <span class="ow">=</span> <span class="p">(</span><span class="o">.</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>By (re)writing it in a point-free style and by applying eta-reductions we
get a very simple definition. It turns out that our <code>holeFunction</code> is
just ordinary function composition^^. Anyway, let&rsquo;s have a look if that works.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">let</span> <span class="n">coolSolution</span> <span class="ow">=</span> <span class="p">((</span><span class="o">.</span><span class="p">)</span> <span class="n">plusOne</span><span class="p">)</span><span class="o">.</span> <span class="n">readTwoArgs</span>
</span><span class='line'><span class="kr">let</span> <span class="n">coolSolution</span> <span class="ow">=</span> <span class="p">(</span><span class="n">plusOne</span> <span class="o">.</span><span class="p">)</span><span class="o">.</span> <span class="n">readTwoArgs</span>
</span><span class='line'><span class="c1">-- (coolSolution &quot;3&quot; &quot;4&quot;) == 8</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, it does! That &ldquo;.).&rdquo; looks funny and will surely confuse everybody
whose doesn&rsquo;t know that &ldquo;trick&rdquo; (and does not have a type-checker in
their brain). However, it gets even funnier. When your right-most
function expects even more arguments you just add &lsquo;a couple of&rsquo; &ldquo;.)&#8221;s
in between!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">let</span> <span class="n">wasteFourArgs</span> <span class="ow">=</span> <span class="p">(</span><span class="nf">\</span><span class="n">a</span> <span class="n">b</span> <span class="n">c</span> <span class="n">d</span> <span class="ow">-&gt;</span> <span class="n">read</span> <span class="n">a</span> <span class="o">+</span> <span class="n">read</span> <span class="n">b</span><span class="p">)</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class='line'><span class="kr">let</span> <span class="n">coolSolution&#39;</span> <span class="ow">=</span> <span class="p">(((</span><span class="n">plusOne</span> <span class="o">.</span><span class="p">)</span> <span class="o">.</span><span class="p">)</span> <span class="o">.</span><span class="p">)</span><span class="o">.</span> <span class="n">wasteFourArgs</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Thus, we have found a way to use the (point-free) function
composition even when you need to feed more than a single argument
into it!</p>

<p>As point-free code is more concise it can be clearer about what you
want to do, however, it can obfuscate your intentions as well! (Look
at those <a href="http://www.haskell.org/haskellwiki/Pointfree#Combinator_discoveries" target="_blank">combinators</a>). In the
case of this <em>((x.).)</em> trick, I think it can still be beneficial if
and only if everybody in your team &ldquo;knows the trick&rdquo; and does not have
to think about it. The nice reason is: As soon as you delete that &ldquo;.)&rdquo;
chain mentally you immediately grasp the meaning of the resulting function!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Explaining the Magic]]></title>
    <link href="http://sleepomeno.github.io/blog/2014/06/25/Explaining-the-Magic/"/>
    <updated>2014-06-25T00:00:00+02:00</updated>
    <id>http://sleepomeno.github.io/blog/2014/06/25/Explaining-the-Magic</id>
    <content type="html"><![CDATA[<p>Yesterday I came across a <a href="http://www.reddit.com/r/haskell/comments/28zx87/whats_your_favorite_response_to_the_show_me_the/" target="_blank">post</a> on the haskell reddit where somebody
posted the following application of <em>replicateM</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kt">:</span><span class="n">m</span> <span class="o">+</span><span class="kt">Control</span><span class="o">.</span><span class="kt">Monad</span>
</span><span class='line'><span class="nf">replicateM</span> <span class="mi">3</span> <span class="s">&quot;01&quot;</span>
</span><span class='line'><span class="c1">-- [&quot;000&quot;,&quot;001&quot;,&quot;010&quot;,&quot;011&quot;,&quot;100&quot;,&quot;101&quot;,&quot;110&quot;,&quot;111&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Dark Magic</h2>

<p>It obviously results in all three-character combinations of zeros and
ones and in general, <em>replicateM x &ldquo;01&rdquo;</em> generates all x-character
combinations of zeros and ones accordingly.</p>

<p><em>replicateM</em> is a standard library function and its haddock
documentation says: &ldquo;<em>replicateM n act</em> performs the action n times,
gathering the results&rdquo; and its type actually is <code>replicateM :: Monad m
=&gt; Int -&gt; m a -&gt; m [a]</code>. So <em>replicateM</em> is <strong>not</strong> a function
explicitly crafted for the purpose of a &ldquo;get me all x-ary combinations
of my string&rdquo; task, it is actually defined for all monads. Just
imagine a more obvious application using the IO monad, which <em>performs the action of
printing hello 3 times and gathers the result</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">replicateM</span> <span class="mi">3</span> <span class="p">(</span><span class="n">putStrLn</span> <span class="s">&quot;hello&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">-- hello</span>
</span><span class='line'><span class="c1">-- hello</span>
</span><span class='line'><span class="c1">-- hello</span>
</span><span class='line'><span class="c1">-- [(),(),()]</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is typical Haskell practice to use a function with such a <em>general</em> look
to solve a rather <em>special</em> problem as our original one &ndash; to such a
degree that it seems like <strong>magic</strong> to programmers with a different
background. Actually, it might look like &ldquo;dark&rdquo; magic when you don&rsquo;t
grasp how/why the hell that result comes about in spite of looking at
the source of <em>replicateM</em>, and you might start getting annoyed with
Haskell altogether if that happens several times&#x2026; anyway, there is no
such thing as (dark) magic ;) so let&rsquo;s demystify that interesting example!</p>

<!-- more -->


<h2>Why it works</h2>

<p>Before looking at the source &ndash; and getting to the operational side of
<em>replicateM</em> &ndash; let&rsquo;s ask ourselves <em>why</em> we get that result.</p>

<p>By taking the documentation into account we can paraphrase <em>replicateM 3 &ldquo;01&rdquo;</em> by saying:
<em>It performs &ldquo;01&rdquo; 3 times and gathers the results</em>. But what sort of action is <code>&ldquo;01&rdquo;</code>.
As a string is a list of characters, it&rsquo;s equal to <code>[&lsquo;0&rsquo;,&lsquo;1&rsquo;]</code> which denotes a &lsquo;non-deterministic&rsquo; character value.
Imagine it as a two-faced character which doesn&rsquo;t know if it really is a &lsquo;0&rsquo; or a &lsquo;1&rsquo;! So what does <em>performing &ldquo;01&rdquo;</em> really mean?
I picture it as creating two parallel universes where that value dissolves into &lsquo;0&rsquo; in the first and into &lsquo;1&rsquo; in the second universe.
Performing another &ldquo;01&rdquo; branches those two universes again so that we get 4 universes. Doing that a third time, those 4
universes branch again in choosing the third value of either &lsquo;0&rsquo; or &lsquo;1&rsquo;. As a result, we get 8 universes which really are 8 lists of characters.
When you gather them you obviously get <em>[&ldquo;000&rdquo;,&ldquo;001&rdquo;,&ldquo;010&rdquo;,&ldquo;011&rdquo;,&ldquo;100&rdquo;,&ldquo;101&rdquo;,&ldquo;110&rdquo;,&ldquo;111&rdquo;]</em>! Confused? Maybe you like the &lsquo;How&rsquo; better!</p>

<h2>How it works</h2>

<p><a href="http://www.haskell.org/hoogle/" target="_blank">Hoogle</a> is my tool of choice to quickly get to base library haskell
source. So <a href="http://hackage.haskell.org/package/base-4.7.0.0/docs/src/Control-Monad.html#replicateM" target="_blank">this</a> tells how <em>replicateM</em> is defined:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">replicateM</span> <span class="n">n</span> <span class="n">x</span> <span class="ow">=</span> <span class="n">sequence</span> <span class="p">(</span><span class="n">replicate</span> <span class="n">n</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="kt">:</span><span class="n">t</span> <span class="n">replicateM</span>
</span><span class='line'><span class="c1">-- replicateM :: Monad m =&gt; Int -&gt; m a -&gt; m [a]</span>
</span></code></pre></td></tr></table></div></figure>


<p>By hoogling for <a href="http://hackage.haskell.org/package/base-4.7.0.0/docs/src/GHC-List.html#replicate" target="_blank">replicate</a> and <a href="http://hackage.haskell.org/package/base-4.7.0.0/docs/src/Control-Monad.html#sequence" target="_blank">sequence</a> we get the whole picture:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">sequence</span> <span class="n">ms</span> <span class="ow">=</span> <span class="kr">let</span> <span class="n">k</span> <span class="n">m</span> <span class="n">m&#39;</span> <span class="ow">=</span> <span class="kr">do</span> <span class="p">{</span> <span class="n">x</span> <span class="ow">&lt;-</span> <span class="n">m</span><span class="p">;</span> <span class="n">xs</span> <span class="ow">&lt;-</span> <span class="n">m&#39;</span><span class="p">;</span> <span class="n">return</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="p">}</span> <span class="kr">in</span> <span class="n">foldr</span> <span class="n">k</span> <span class="p">(</span><span class="n">return</span> <span class="kt">[]</span><span class="p">)</span> <span class="n">ms</span>
</span><span class='line'><span class="nf">replicate</span> <span class="n">n</span> <span class="n">x</span>           <span class="ow">=</span>  <span class="n">take</span> <span class="n">n</span> <span class="p">(</span><span class="n">repeat</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kt">:</span><span class="n">t</span> <span class="n">sequence</span>
</span><span class='line'><span class="c1">--sequence :: Monad m =&gt; [m a] -&gt; m [a]</span>
</span><span class='line'><span class="kt">:</span><span class="n">t</span> <span class="n">replicate</span>
</span><span class='line'><span class="c1">--replicate :: Int -&gt; a -&gt; [a]</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>replicate</em> surely is the easiest function to grasp: <code>replicate n x</code>
results in a list with <em>n</em> elements of value <em>x</em>. For instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">replicate</span> <span class="mi">3</span> <span class="s">&quot;01&quot;</span>
</span><span class='line'><span class="c1">--[&quot;01&quot;,&quot;01&quot;,&quot;01&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we can actually get the following equations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">replicateM</span> <span class="mi">3</span> <span class="s">&quot;01&quot;</span> <span class="o">==</span> <span class="n">sequence</span> <span class="p">[</span><span class="s">&quot;01&quot;</span><span class="p">,</span><span class="s">&quot;01&quot;</span><span class="p">,</span><span class="s">&quot;01&quot;</span><span class="p">]</span> <span class="o">==</span>
</span><span class='line'><span class="p">[</span><span class="s">&quot;000&quot;</span><span class="p">,</span><span class="s">&quot;001&quot;</span><span class="p">,</span><span class="s">&quot;010&quot;</span><span class="p">,</span><span class="s">&quot;011&quot;</span><span class="p">,</span><span class="s">&quot;100&quot;</span><span class="p">,</span><span class="s">&quot;101&quot;</span><span class="p">,</span><span class="s">&quot;110&quot;</span><span class="p">,</span><span class="s">&quot;111&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the magic somehow lies in the <em>sequence</em> method or rather in the
List monad!</p>

<h3>Sequence</h3>

<p>As in our application <em>sequence</em> operates in the list monad you can
picture it using a list comprehension if you are more familiar with it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">sequence</span> <span class="n">ms</span> <span class="ow">=</span> <span class="kr">let</span> <span class="n">k</span> <span class="n">m</span> <span class="n">m&#39;</span> <span class="ow">=</span> <span class="p">[</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span> <span class="o">|</span> <span class="n">x</span> <span class="ow">&lt;-</span> <span class="n">m</span><span class="p">,</span> <span class="n">xs</span> <span class="ow">&lt;-</span> <span class="n">m&#39;</span><span class="p">]</span> <span class="kr">in</span> <span class="n">foldr</span> <span class="n">k</span> <span class="p">(</span><span class="n">return</span> <span class="kt">[]</span><span class="p">)</span> <span class="n">ms</span>
</span><span class='line'><span class="c1">-- m is a string, x is a character</span>
</span><span class='line'><span class="c1">-- m&#39; is a list of strings (= the accumulator), xs is a string</span>
</span><span class='line'><span class="kt">:</span><span class="n">t</span> <span class="n">sequence</span>
</span><span class='line'><span class="c1">-- sequence :: [[a]] -&gt; [[a]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s have a closer look at the last call of <em>k</em> in <em>sequence</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">replicateM</span> <span class="mi">3</span> <span class="s">&quot;01&quot;</span>
</span><span class='line'><span class="c1">-- == k &quot;01&quot; [&quot;00&quot;,&quot;01&quot;,&quot;10&quot;,&quot;11&quot;] ==</span>
</span><span class='line'><span class="p">[</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span> <span class="o">|</span> <span class="n">x</span> <span class="ow">&lt;-</span> <span class="s">&quot;01&quot;</span><span class="p">,</span> <span class="n">xs</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="s">&quot;00&quot;</span><span class="p">,</span><span class="s">&quot;01&quot;</span><span class="p">,</span><span class="s">&quot;10&quot;</span><span class="p">,</span><span class="s">&quot;11&quot;</span><span class="p">]]</span>
</span><span class='line'><span class="c1">-- == [&quot;000&quot;,&quot;001&quot;,&quot;010&quot;,&quot;011&quot;] ++ [&quot;100&quot;,&quot;101&quot;,&quot;110&quot;,&quot;111&quot;]</span>
</span><span class='line'><span class="c1">-- == [&quot;000&quot;,&quot;001&quot;,&quot;010&quot;,&quot;011&quot;,&quot;100&quot;,&quot;101&quot;,&quot;110&quot;,&quot;111&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>At first <em>x</em> is selected to be &lsquo;0&rsquo; and prepended to all strings of
<em>xs</em>, the resulting list of strings is then concatenated with <em>x</em>
being &lsquo;1&rsquo; prepended to all strings of <em>xs</em> again. As a result, we will
always get a lexicographically correct ordering of all <em>n</em>-ary combinations of
&ldquo;01&rdquo; no matter what <em>n</em> we choose in <strong>replicateM n [&lsquo;0&rsquo;,&lsquo;1&rsquo;]</strong>.</p>

<p>We have seen how an innocent-looking function like <em>replicateM</em> can &ndash;
when it is used with the List monad &ndash; produce a &ldquo;magical&rdquo; result, only to then discover that there is no magic involved ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating a mutating algorithm from C to Haskell]]></title>
    <link href="http://sleepomeno.github.io/blog/2014/03/11/Case-Study---From-C-to-Haskell/"/>
    <updated>2014-03-11T00:00:00+01:00</updated>
    <id>http://sleepomeno.github.io/blog/2014/03/11/Case-Study&#8212;From-C-to-Haskell</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently stumbled on a C implementation of an algorithm computing
the <em>combinations without repetition</em> (of a certain size <strong>k</strong>) of the first <strong>n</strong> natural
numbers. So the wanted result is a list of combinations like for
example <code>0 1 2 3 4</code> or <code>11 13 20 33 49</code> in the case of <code>k=5</code> and
<code>n=50</code> (<em>without repetition</em> means that no number occurs twice in the
same combination). As a matter of fact, I wanted to migrate that
function to Haskell; so this post is about the evolution of the
solution I came up with. I guess this case study is somehow kind of exemplary for
the thought process which you need to undergo whenever you migrate a
not-so-trivial algorithm from C to Haskell as it touches upon the
topics of <em>laziness</em> and <em>mutation</em>.</p>

<!-- more -->


<h1>The C Version</h1>

<p>So let&rsquo;s start with the C Version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="cm">/* puts all combinations into the array of its first argument */</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">combinationsWithoutRepetition</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">combinations</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">feld</span><span class="p">,</span><span class="kt">int</span> <span class="n">bound</span><span class="p">,</span><span class="kt">int</span> <span class="n">length</span><span class="p">,</span><span class="kt">int</span> <span class="n">pos</span><span class="p">,</span><span class="kt">int</span> <span class="n">val</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">pos</span><span class="o">==</span><span class="n">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">combinations</span><span class="p">[</span><span class="n">idx</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">feld</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">*</span> <span class="n">feldPos</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">feld</span><span class="p">[</span><span class="n">pos</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">val</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">bound</span><span class="p">;</span><span class="o">++</span><span class="n">i</span><span class="p">){</span>
</span><span class='line'>      <span class="o">*</span><span class="n">feldPos</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="n">combinationsWithoutRepetition</span><span class="p">(</span><span class="n">combinations</span><span class="p">,</span><span class="n">feld</span><span class="p">,</span><span class="n">bound</span><span class="p">,</span><span class="n">length</span><span class="p">,</span><span class="n">pos</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="mi">50</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">5</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">nrOfCombinations</span> <span class="o">=</span> <span class="mi">2118760</span><span class="p">;</span> <span class="c1">// assume that&#39;s correct for n=50,k=5</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">combinations</span><span class="p">;</span>
</span><span class='line'>  <span class="n">combinations</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">nrOfCombinations</span><span class="o">*</span><span class="n">k</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">singleCombination</span><span class="p">;</span>
</span><span class='line'>  <span class="n">singleCombination</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">k</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">combinationsWithoutRepetition</span><span class="p">(</span><span class="n">combinations</span><span class="p">,</span><span class="n">singleCombination</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">50</span><span class="p">;</span> <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d %d %d %d %d </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">combinations</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">combinations</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="n">combinations</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span><span class="n">combinations</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">],</span><span class="n">combinations</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">4</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So <code>combinationsWithoutRepetition</code> does all the work, however, memory
needs to be allocated for the two pointers to int first. (Surely, in a
real program <code>nrOfCombinations</code> would call a subroutine computing the
necessary number of computations, I omitted it for brevity&rsquo;s sake.) In
the end, the computed combinations can be accessed through the pointer
<code>combinations</code>.</p>

<p>Anyway, <code>combinationsWithoutRepetition</code> didn&rsquo;t look straightforward to
me, I didn&rsquo;t really understand how it worked and above all, I couldn&rsquo;t
see how I could tweak the algorithm so that I could do without the mutation
of <code>combinations</code> and <code>idx</code> in the Haskell solution. Consequently, I decided to
translate the C version more or less directly to Haskell, using the
<code>ST</code> monad.</p>

<p>The <code>ST</code> monad makes it possible to have references pointing to
mutable memory in Haskell. This comes in handy when you want to solve
a problem for which there is no efficient algorithm known doing
without mutation. In our case it gives us the power to create a first
running Haskell version without fully understanding the underlying
algorithm of the C implementation. Bear in mind that you always need to run <code>runST</code> to
get a value out of the <code>ST</code> monad like below.</p>

<h2>The ST Version</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">comb1</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]]</span>
</span><span class='line'><span class="nf">comb1</span> <span class="n">k</span> <span class="n">elements</span> <span class="ow">=</span> <span class="n">runST</span> <span class="o">$</span> <span class="kr">do</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">bound</span> <span class="ow">=</span> <span class="n">length</span> <span class="n">elements</span>
</span><span class='line'>      <span class="n">boundMinus1</span> <span class="ow">=</span> <span class="n">bound</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>      <span class="n">elementArray</span> <span class="ow">=</span> <span class="n">listArray</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">bound</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">elements</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">comb1&#39;</span> <span class="ow">::</span> <span class="kt">STRef</span> <span class="n">s</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]]</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">ST</span> <span class="n">s</span> <span class="nb">()</span>
</span><span class='line'>      <span class="n">comb1&#39;</span> <span class="n">combos</span>  <span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span> <span class="ow">=</span>
</span><span class='line'>        <span class="kr">let</span> <span class="n">comb1&#39;&#39;</span> <span class="n">currentCombo</span> <span class="p">(</span><span class="o">!</span><span class="n">pos</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
</span><span class='line'>              <span class="o">|</span> <span class="n">pos</span> <span class="o">==</span> <span class="n">k</span>  <span class="ow">=</span> <span class="n">modifySTRef</span> <span class="n">combos</span> <span class="p">((</span><span class="kt">:</span><span class="p">)</span> <span class="n">currentCombo</span><span class="p">)</span>
</span><span class='line'>              <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">forM_</span> <span class="p">[</span><span class="n">val</span><span class="o">..</span><span class="n">boundMinus1</span><span class="p">]</span> <span class="o">$</span> <span class="nf">\</span><span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">comb1&#39;&#39;</span> <span class="p">(</span><span class="n">elementArray</span><span class="o">!</span><span class="n">x</span> <span class="kt">:</span> <span class="n">currentCombo</span><span class="p">)</span> <span class="p">(</span><span class="n">pos</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="kr">in</span>
</span><span class='line'>         <span class="n">comb1&#39;&#39;</span> <span class="kt">[]</span> <span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
</span><span class='line'>  <span class="n">combos</span> <span class="ow">&lt;-</span> <span class="n">newSTRef</span> <span class="kt">[]</span>
</span><span class='line'>  <span class="n">comb1&#39;</span> <span class="n">combos</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readSTRef</span> <span class="n">combos</span>
</span></code></pre></td></tr></table></div></figure>


<p>This version already has two conceptual advantages: It can use an arbitrary list
of <code>Int</code> s as its second parameter (actually it could even be polymorphic
in the type of the list) and returns a list of lists which is
semantically more correct than the C implementation which implicitly
returned a long concatenation of the combination lists. Moreover, I
didn&rsquo;t need any mutable equivalent of <code>idx</code>.</p>

<p>Obviously, I wasn&rsquo;t too satisfied with this implementation, though.
Above all, the lack of <em>laziness</em> proves to be really annoying &ndash; the
whole list of combinations needs to be computed before you can access
the first element of it! This is devastating as in every real word
scenario of a decently large <code>n</code> and <code>k</code> the resulting list of
combinations is unlikely to fit into your available memory. So comes
the lazy <code>ST</code> monad to the rescue!</p>

<h2>The Lazy ST Version</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">comb2</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]]</span>
</span><span class='line'><span class="nf">comb2</span> <span class="n">k</span> <span class="n">elements</span> <span class="ow">=</span> <span class="kt">L</span><span class="o">.</span><span class="n">runST</span> <span class="o">$</span> <span class="kr">do</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">bound</span> <span class="ow">=</span> <span class="n">length</span> <span class="n">elements</span>
</span><span class='line'>      <span class="n">boundMinus1</span> <span class="ow">=</span> <span class="n">bound</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>      <span class="n">elementArray</span> <span class="ow">=</span> <span class="n">listArray</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">bound</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">elements</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">comb2&#39;</span> <span class="ow">::</span> <span class="kt">STRef</span> <span class="n">s</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]]</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">L</span><span class="o">.</span><span class="kt">ST</span> <span class="n">s</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]]</span>
</span><span class='line'>      <span class="n">comb2&#39;</span> <span class="n">combos</span>  <span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span> <span class="ow">=</span>
</span><span class='line'>        <span class="kr">let</span> <span class="n">comb2&#39;&#39;</span> <span class="n">currentCombo</span> <span class="p">(</span><span class="o">!</span><span class="n">pos</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
</span><span class='line'>              <span class="o">|</span> <span class="n">pos</span> <span class="o">==</span> <span class="n">k</span>  <span class="ow">=</span> <span class="kr">do</span> <span class="p">{</span> <span class="kt">L</span><span class="o">.</span><span class="n">strictToLazyST</span> <span class="o">$</span> <span class="n">modifySTRef</span> <span class="n">combos</span> <span class="p">((</span><span class="kt">:</span><span class="p">)</span> <span class="n">currentCombo</span><span class="p">);</span> <span class="n">return</span> <span class="p">[</span><span class="n">currentCombo</span><span class="p">]</span> <span class="p">}</span>
</span><span class='line'>              <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">fmap</span> <span class="n">concat</span> <span class="o">$</span> <span class="n">forM</span> <span class="p">[</span><span class="n">val</span><span class="o">..</span><span class="n">boundMinus1</span><span class="p">]</span> <span class="o">$</span> <span class="nf">\</span><span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">comb2&#39;&#39;</span> <span class="p">(</span><span class="n">elementArray</span><span class="o">!</span><span class="n">x</span> <span class="kt">:</span> <span class="n">currentCombo</span><span class="p">)</span> <span class="p">(</span><span class="n">pos</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="kr">in</span>
</span><span class='line'>         <span class="n">comb2&#39;&#39;</span> <span class="kt">[]</span> <span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
</span><span class='line'>  <span class="n">combos</span> <span class="ow">&lt;-</span> <span class="kt">L</span><span class="o">.</span><span class="n">strictToLazyST</span> <span class="o">$</span> <span class="n">newSTRef</span> <span class="kt">[]</span>
</span><span class='line'>  <span class="n">comb2&#39;</span> <span class="n">combos</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Anyway, that&rsquo;s the first lazy <code>ST</code> implementation I could come up with
and luckily, it gave me the intuition how I could get completely rid of the <code>ST</code>
monad. It is obvious that the <code>modifySTRef</code> calls are absolutely
pointless as <code>fmap concat</code> just concatenates the <code>[currentCombo]</code>
lists returned by the base cases of the recursion and <code>combos</code> is not
even considered in the result of the computation. So let&rsquo;s see the
version resulting from throwing the <code>ST</code> monad into the garbage can:</p>

<h2>The No ST Version</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">comb3</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]]</span>
</span><span class='line'><span class="nf">comb3</span> <span class="n">k</span> <span class="n">elements</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">bound</span> <span class="ow">=</span> <span class="n">length</span> <span class="n">elements</span>
</span><span class='line'>      <span class="n">boundMinus1</span> <span class="ow">=</span> <span class="n">bound</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>      <span class="n">elementArray</span> <span class="ow">=</span> <span class="n">listArray</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">bound</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">elements</span>
</span><span class='line'>      <span class="n">comb3&#39;</span>  <span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span> <span class="ow">=</span> <span class="n">comb3&#39;&#39;</span> <span class="kt">[]</span> <span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
</span><span class='line'>        <span class="kr">where</span>
</span><span class='line'>        <span class="n">comb3&#39;&#39;</span> <span class="n">currentCombo</span> <span class="p">(</span><span class="o">!</span><span class="n">pos</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
</span><span class='line'>          <span class="o">|</span> <span class="n">pos</span> <span class="o">==</span> <span class="n">k</span>  <span class="ow">=</span> <span class="p">[</span><span class="n">currentCombo</span><span class="p">]</span>
</span><span class='line'>          <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">concat</span> <span class="p">[</span><span class="n">comb3&#39;&#39;</span> <span class="p">(</span><span class="n">elementArray</span><span class="o">!</span><span class="n">x</span> <span class="kt">:</span> <span class="n">currentCombo</span><span class="p">)</span> <span class="p">(</span><span class="n">pos</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">|</span> <span class="n">x</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="n">val</span><span class="o">..</span><span class="n">boundMinus1</span><span class="p">]]</span>
</span><span class='line'>      <span class="kr">in</span>
</span><span class='line'>  <span class="n">comb3&#39;</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s much better but still a little obscure. In the end, I found a nice
declarative solution at last:</p>

<h2>The Declarative Version</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">comb4</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]]</span>
</span><span class='line'><span class="nf">comb4</span> <span class="mi">0</span> <span class="kr">_</span>      <span class="ow">=</span> <span class="p">[</span><span class="kt">[]</span><span class="p">]</span>
</span><span class='line'><span class="nf">comb4</span> <span class="n">n</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">map</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="p">)</span> <span class="p">(</span><span class="n">comb4</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">xs</span><span class="p">)</span> <span class="o">++</span> <span class="n">comb4</span> <span class="n">n</span> <span class="n">xs</span>
</span><span class='line'><span class="nf">comb4</span> <span class="kr">_</span> <span class="kr">_</span>      <span class="ow">=</span> <span class="kt">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>It just reads as: &ldquo;In order to get all <em>k</em>-combinations of a <em>n</em>
length list take the first element of the list, prepend it to all
combinations of size <em>k-1</em> of the tail of the list and then add all
those <em>k</em>-combations of the tail of the list!&rdquo; It finally makes sense
when you think about it for a long time ;) In addition, that approach
can be made a little bit more efficient for certain <em>n</em> and <em>k</em> using
a very simple memoization strategy. (This simple strategy very quickly
eats up your memory, though.)</p>

<h2>The memoized Declarative Version</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="c1">-- Version with very simple memoization (&quot;memo table&quot;)</span>
</span><span class='line'><span class="nf">combTable</span> <span class="ow">=</span> <span class="p">[[</span> <span class="n">comb5</span> <span class="n">n</span> <span class="p">(</span><span class="n">drop</span> <span class="n">elementNr</span> <span class="n">numbers</span><span class="p">)</span> <span class="o">|</span> <span class="n">elementNr</span> <span class="ow">&lt;-</span> <span class="n">zeroToLength</span><span class="p">]</span> <span class="o">|</span> <span class="n">n</span> <span class="ow">&lt;-</span> <span class="n">zeroToLength</span><span class="p">]</span>
</span><span class='line'>   <span class="kr">where</span>
</span><span class='line'>   <span class="n">zeroToLength</span> <span class="ow">=</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="n">length</span> <span class="n">numbers</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nf">comb5</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]]</span>
</span><span class='line'><span class="nf">comb5</span> <span class="mi">0</span> <span class="kr">_</span>      <span class="ow">=</span> <span class="p">[</span><span class="kt">[]</span><span class="p">]</span>
</span><span class='line'><span class="nf">comb5</span> <span class="n">k</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">map</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="p">)</span> <span class="p">(</span><span class="n">combTable</span> <span class="o">!!</span> <span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">!!</span> <span class="n">newlength</span><span class="p">)</span> <span class="o">++</span> <span class="p">(</span><span class="n">combTable</span> <span class="o">!!</span> <span class="n">k</span> <span class="o">!!</span> <span class="n">newlength</span><span class="p">)</span>
</span><span class='line'>                <span class="kr">where</span>
</span><span class='line'>                    <span class="n">newlength</span> <span class="ow">=</span> <span class="n">n</span><span class="o">-</span><span class="n">length</span> <span class="n">xs</span>
</span><span class='line'><span class="nf">comb5</span> <span class="kr">_</span> <span class="kr">_</span>      <span class="ow">=</span> <span class="kt">[]</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Conclusion</h1>

<p>Originally, I planned to examine each version&rsquo;s performance in detail,
however, that soon felt too cumbersome to me. Anyway, the <em>lazy</em>
versions do have a significant practical advantage as they do not need
to compute all combinations in order to get the first 10 combinations!
Judging from a few tests I have made, it also turns out that <code>comb3</code> (not using mutation) performs better
than both versions using <code>ST</code> even when all combinations are
requested so this seems to be a case where mutation does not buy you
anything in Haskell. If things look differently on your machine, feel
free to tell me ;)</p>

<p>You can find all solution versions <a href="http://sleepomeno.github.io/combinations/haskell-all.hs" target="_blank">here</a>, ready for GHCi. Anyway, feel
free to post other solutions to the problem which may score better in
terms of laziness/time performance/space performance/etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Git is better than SVN... or is it?]]></title>
    <link href="http://sleepomeno.github.io/blog/2014/02/24/git-diff-svn/"/>
    <updated>2014-02-24T00:00:00+01:00</updated>
    <id>http://sleepomeno.github.io/blog/2014/02/24/git-diff-svn</id>
    <content type="html"><![CDATA[<p>I don&rsquo;t know the numbers of SVN users vs. Git users but in any case there are
still many companies out there using SVN (probably more than using
Git?!) The question is: Why shouldn&rsquo;t they? Does Git actually provide
enough benefits which are worth the hassle of migrating? If yes, how
would you convince a SVN user? <strong>Have you experienced that you couldn&rsquo;t comprehensively convince an SVN advocate of Git&rsquo;s
superiority although you&rsquo;re absolutely sure of it?</strong> Or more generally:
How to best convince anybody to use another technology?</p>

<!-- more -->


<h2>&ldquo;git svn differences&rdquo;</h2>

<p>It&rsquo;s interesting to actually google &ldquo;<em>git svn differences</em>&rdquo; and to
skim the results you get. The links I got led to some texts which rather &lsquo;objectively&rsquo;
enumerate the core differences, however, there are also some which
clearly try to persuade the reader of Git&rsquo;s benefits. Anyway, in
both types of text the core differences tend to be the following:</p>

<ul><li>

Git is faster

</li><li>

Branching is cheaper

</li><li>

Git is distributed, SVN is centralized

</li></ul>


<p>Funnily enough, quite often I stumbled across what I call the tale of the &lsquo;Hermit
Programmer&rsquo; scenario: The programmer has no connection to the SVN
server and can&rsquo;t commit therefore (imagine yourself miles away from
civilization and your life depends on the ability to commit just
<em>now</em>&#x2026; for whatever reason?!), whereas the programmer could commit to their local repository if they used Git.
Hooray! <em>Hooray!</em> Well, seriously&#x2026; it&rsquo;s a nice story but would it make you
shutdown your working SVN infrastructure in favor of Git, in view
of the complexity of migrating all repos, the need of learning Git
commands and your coworkers&#8217; anger when you tell them that they now
need to learn Git because some commands run <em>faster</em>?</p>

<h2>Wrong ways of advertising Git</h2>

<p>Obviously, all the above arguments are valid but they are not really
convincing enough to persuade anyone to replace SVN with Git. Imagine a conversation between
a Git fan and a SVN user:</p>

<p><strong>Git fan</strong>: Hey! You know, Git is really better, it works much
faster!</p>

<p><strong>SVN user</strong>: Ah, I don&rsquo;t care. SVN is fast enough for me. I commit
once a day, that takes a few seconds, so no problem at all&#x2026;</p>

<p><strong>Git fan</strong>: Anyway, it&rsquo;s not only faster, it also takes less disk
space, especially branches!</p>

<p><strong>SVN user</strong>: Branches?! Ah, I don&rsquo;t even remember the last time I
created a branch. I know, theoretically you could create &ldquo;feature branches&rdquo; but
we don&rsquo;t do this at work. Why should we? Anyway, we have enough
storage in any case.</p>

<p><strong>Git fan</strong>: Well, you know, <em>[dramatic pause as now comes his &lsquo;killer
argument&rsquo;]</em>, Git is distributed, so everybody has a local repository
and the whole project history. So it can&rsquo;t get lost when a <em>central</em>
server crashes!</p>

<p><strong>SVN User</strong>: No problem, we create daily backups of all our
repositories.</p>

<h2>The alternative</h2>

<p>When I express my favorite Git features (and I&rsquo;m somehow convinced that those actually
represent the <em>quintessence</em> of Git&rsquo;s benefits over SVN in daily use) it sounds like that:</p>

<ul><li>

You can rewrite your history with Git!

</li><li>

You have &#8220;pull requests&#8221; for Open Source projects collaboration!

</li><li>

A branch is just a reference to a commit!

</li><li>

Instead of merging you can &#8216;rebase&#8217; a branch on another!

</li></ul>


<p>This time the above SVN User just wouldn&rsquo;t understand the meaning of
my arguments! I would need to first explain all that concepts in
detail and I&rsquo;d need to introduce the workflows which are easily possible using Git
and impossible or a pain in SVN&#x2026; that lengthy talk doesn&rsquo;t go nicely with our
initial goal of convincing
our vis-à-vis with some quick bullet point arguments, obviously. So it
seems like we can&rsquo;t have it all. Unless you have some ideas.</p>

<h2>Conclusion</h2>

<p>If you really want to convey Git&rsquo;s benefits to a fellow SVN coworker you need to take your
time. You need to <strong>show</strong> the features, you should give <strong>examples</strong>
and everyday <strong>scenarios</strong> where Git&rsquo;s capabilities make work at lot
easier. Believe me, such insights weigh a lot more than purely
rational arguments like <em>Git is faster</em>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This is not an org-mode tutorial]]></title>
    <link href="http://sleepomeno.github.io/blog/2014/02/16/This-is-not-an-org-mode-Tutorial/"/>
    <updated>2014-02-16T00:00:00+01:00</updated>
    <id>http://sleepomeno.github.io/blog/2014/02/16/This-is-not-an-org-mode-Tutorial</id>
    <content type="html"><![CDATA[<p>I guess it was about a year ago when I decided to give <code>org-mode</code>
another go; I had used it before but hadn&rsquo;t been able to quite wrap my head
around it. This time I managed to get through the hard first
difficulties so that I&rsquo;m a vivid <code>org-mode</code> user by now&#x2026; but first
make clear: what is <code>org-mode</code> anyway and what has it to do with plain text?</p>

<!-- more -->


<h2>Org-mode</h2>

<p><code>org-mode</code> is an Emacs major mode. There is lots of
<a href="http://orgmode.org/#docs" target="_blank">documentation and tutorials</a> on <code>org-mode</code> and I won&rsquo;t be tempted to
give another tutorial (the sheer amount of <code>org-mode</code> features to present would
make that post very, very long&#x2026;). I&rsquo;d rather like to give an
explanation of its philosophy and applicability.</p>

<p>On its <a href="http://orgmode.org/" target="_blank">official website</a> it is characterized as
follows: <strong>Org mode is for keeping notes, maintaining TODO lists, planning projects, and authoring documents with a fast and effective
plain-text system</strong>. Although that obviously is a description without a doubt,
<code>org-mode</code> still has a broader area of applicability &ndash; in fact, the HTML title
of that <a href="http://orgmode.org/" target="_blank">official website</a> describes it best: <strong>Your Life in Plain Text</strong>.</p>

<p>To put it bluntly, <code>org-mode</code> can act as a replacement for any
application you normally use for structuring any text-based
information. Well, what is &lsquo;text-based&rsquo; information? Actually, this is
pretty much everything; only images and audio files come to my mind as
exceptions. However, even for images and audio files you normally
store text-based information in the form of meta information. So,
generally, nearly all information that needs structuring is of a
text-based nature which is accessible to <code>org-mode</code> as a consequence.</p>

<h2>Org-mode&rsquo;s killer feature</h2>

<p>So the &lsquo;killer feature&rsquo; of <code>org-mode</code> is not any specific
application &ndash; neither &lsquo;TODO lists&rsquo;, nor
&lsquo;planning projects&rsquo; &ndash; it is rather the fact that you can use it for
structuring/managing whatever text-based information you want! You
don&rsquo;t need to use 20 different applications for your daily
&lsquo;informational needs&rsquo; any longer, you just need 1 to rule them all!
That fact alone of replacing 20 different things with 1 single, more
general thing somehow makes my programmer&rsquo;s soul smile &ndash; just imagine
the improvement of code quality when you factor out a common pattern
of 20 similar methods into 1 generalized method. Or: Imagine a
&lsquo;collection&rsquo; interface which provides methods like &lsquo;length&rsquo; for all
&lsquo;collection&rsquo; implementations&#x2026; Anyway, I&rsquo;m
convinced that such an abstraction not only shines in programming
but also in &lsquo;real life&rsquo; &ndash; look at it from this point of view: for any
rise of efficiency you&rsquo;ll achieve in mastering
<code>org-mode</code> you would have needed an equal rise of efficiency in all 20
applications in the first place! <em>And:</em> you <strong>own</strong> all your information in plain
text. I&rsquo;ll explain in a second the benefits of &lsquo;owning&rsquo;; first, let&rsquo;s address
another objection which will lead us there.</p>

<h2>We are slaves of interfaces</h2>

<p>You might argue that you don&rsquo;t even need close to 20 applications but you&rsquo;d be
surprised how fast they add up: preparing slides,
managing your calendar, writing your thesis, managing contacts, TODOs,
writing a blog post, adding bookmarks, etc. &ndash; with the rise of IT we have gradually become slaves
of a lot of programs. Still some of us might remember the <em>organizers</em>
we once had for taking down anything a decade or two ago &ndash; handwritten, plain text was
good enough in those times &ndash; they were the <strong>Personal Information
Managers</strong> of the pre-IT era. Gradually, we have been convinced to use
different desktop applications with specialized interfaces for
managing text-based information; the smartphone and tablet era has
actually even amplified that trend of veering away from plain text.</p>

<h2>We don&rsquo;t own our information</h2>

<p>Those 20 applications from before have &lsquo;hidden&rsquo; our information in databases which only understand SQL.
So you would need to learn SQL to connect to &lsquo;your&rsquo; information &ndash; apart from
the fact that the application in question might be a web application
and you don&rsquo;t have any direct access to the server where &lsquo;your&rsquo;
information is located&#x2026; that legal loss of ownership is not what bugs
me for this blog post&rsquo;s sake, though. It is rather losing one&rsquo;s grasp
on one&rsquo;s information.
Suppose it&rsquo;s a TODO list application: you need the
corresponding app for our tablet/smartphone/etc. to get to your
TODO items. For many domains of applications a plain text export option can
<strong>not</strong> be taken for granted. Even for an application with a that simple
domain model like a TODO list application you might have troubles to
just copy the TODO items from your browser window as this would not
save the &ldquo;done&rdquo; status ;) (Calendar applications normally are the
exception as they provide some standardized import/export options)</p>

<p>I want to emphasize that this should <strong>not</strong> be understood as a rant on the IT world and evil web
apps which hide my data ;) On the contrary, I like my iPad and the
applications which provide me nice interfaces to add my text-based
information. I just pity the fact all those IT developments have led to
a loss of control of our information which is equally proportional to the
degree of which we moved away from plain text! Anways, we are lucky, there is a
possible escape: Use <code>org-mode</code>&rsquo;s plain text as the <em>data source</em> and
the beautiful iPad app as its <em>view</em> only! For instance, that works well
for my <code>org-mode</code> calendar data which I can sync with Google Calendar.
Another example is this blog post: I&rsquo;m actually writing this in
<code>org-mode</code> and export it in a Markdown format which the Octopress
blogging framework understands.</p>

<p>Anyway, I will perhaps post several customizations of how I tailored <code>org-mode</code> to my
needs in future posts.</p>

<h2>Conclusion</h2>

<p><code>org-mode</code> provides the power of structuring text-based information
and numerous export options to communicate those information to the
outside-world. If you care about information and you are an Emacs user anyway, give it a try.</p>

<p>If you shy away from Emacs you might be interested in the web
application <a href="https://workflowy.com/" target="_blank">workflowy</a>. It provides some portion of <code>org-mode</code>&rsquo;s benefits of
managing hierarchical textual information with only structure and no
layout in mind. If you need the full power there is no alternative to
<code>org-mode</code>, though. After all, there is only one ring to rule them all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Explaining Haskell RankNTypes for all]]></title>
    <link href="http://sleepomeno.github.io/blog/2014/02/12/Explaining-Haskell-RankNTypes-for-all/"/>
    <updated>2014-02-12T00:00:00+01:00</updated>
    <id>http://sleepomeno.github.io/blog/2014/02/12/Explaining-Haskell-RankNTypes-for-all</id>
    <content type="html"><![CDATA[<p>The Glasgow Haskell Compiler supports a language extension called
<code>RankNTypes</code> which I&rsquo;ve had my problems to understand. The moment I
understood that it mostly refers to first-order logic universal
quantification things became easier, though&#x2026; but first let&rsquo;s explore why we
need it in a step-by-step example.</p>

<!-- more -->


<h2>length :: forall a. [a] &ndash;> Int</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kt">:</span><span class="n">t</span> <span class="n">length</span>
</span><span class='line'><span class="c1">-- length :: [a] -&gt; Int</span>
</span><span class='line'><span class="nf">length</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="c1">-- 3</span>
</span><span class='line'><span class="kr">let</span> <span class="n">intLength</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Int</span><span class="p">;</span> <span class="n">intLength</span> <span class="ow">=</span> <span class="n">length</span>
</span><span class='line'><span class="kt">:</span><span class="n">t</span> <span class="n">intLength</span>
</span><span class='line'><span class="c1">-- intLength :: [Int] -&gt; Int</span>
</span><span class='line'><span class="nf">intLength</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="c1">-- 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>We start with the well-known polymorphic function <code>length</code> in a fresh
GHCI session. Above we
see how the type checker instantiates <code>a</code> to be <code>Int</code> in the type of
<code>intLength</code>. Likewise we could create a function <code>charLength</code> &ndash;
anyway, <code>length</code> can be instantiated to oblige to a list of any type
we want, so it is defined <em>for all</em> possible types <code>a</code>. For the sake
of simplicity, I&rsquo;ll call a function like <code>intLength</code> (which actually
corresponds to instantiating the type variable <code>a</code> of <code>length</code>) a
<em>version</em> of <code>length</code>.</p>

<p>As a matter of fact, a normal Haskell type signature such as <code>[a]
-&gt; Int</code> always implies that the type variable(s) are universally
quantified with 1 <em>forall</em> section located at the beginning of the
type declaration. <code>length</code>&rsquo;s type thus corresponds to <code>forall a. [a] -&gt;
Int</code>. We call such a type a <em>Rank-1-Type</em> as there is 1 <em>forall</em> in
the type annotation. The fact that we can omit the <em>forall</em> usually &ndash;
and aren&rsquo;t used to it as a consequence &ndash; will make things look complicated
when we actually need it, as we&rsquo;ll see later on. In the end, <em>forall</em> provides
a scope just like its first-order logic equivalent.</p>

<h2>Apply a length-like function to a list</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">let</span> <span class="n">apply</span> <span class="ow">::</span> <span class="p">([</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Int</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Int</span><span class="p">;</span> <span class="n">apply</span> <span class="n">f</span> <span class="n">x</span> <span class="ow">=</span> <span class="n">f</span> <span class="n">x</span>
</span><span class='line'><span class="nf">apply</span> <span class="n">length</span> <span class="s">&quot;hello world&quot;</span>
</span><span class='line'><span class="c1">-- 11</span>
</span><span class='line'><span class="nf">apply</span> <span class="n">intLength</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="c1">-- 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>apply</code> function just applies a function that takes a list and
returns an <code>Int</code> (like <code>length</code> does) to a value.
Nothing fancy nor useful at all, obviously. Still, let&rsquo;s note that under the hood
the type of <code>apply</code> is <code>forall a. ([a] -&gt; Int) -&gt; [a] -&gt; Int</code>. So far, so
good, the type checker is happy. Now let&rsquo;s a write a function
<code>applyToTuple</code> that applies a function like <code>length</code> to a tuple of
lists so that the lists of the tuple can be of different types.</p>

<h2>Apply a length-like function to a tuple of lists</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">let</span> <span class="n">applyToTuple</span> <span class="n">f</span> <span class="p">(</span><span class="n">a</span><span class="o">@</span><span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">),</span><span class="n">b</span><span class="o">@</span><span class="p">(</span><span class="n">y</span><span class="kt">:</span><span class="n">ys</span><span class="p">))</span> <span class="ow">=</span> <span class="p">(</span><span class="n">f</span> <span class="n">a</span><span class="p">,</span> <span class="n">f</span> <span class="n">b</span><span class="p">)</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)</span>
</span><span class='line'><span class="nf">applyToTuple</span> <span class="n">length</span> <span class="p">(</span><span class="s">&quot;hallo&quot;</span><span class="p">,[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
</span><span class='line'><span class="c1">--No instance for (Num Char)</span>
</span><span class='line'><span class="c1">--  arising from the literal `1&#39;</span>
</span><span class='line'><span class="c1">-- ...</span>
</span><span class='line'><span class="kt">:</span><span class="n">t</span> <span class="n">applyToTuple</span>
</span><span class='line'><span class="c1">-- applyToTuple :: ([t] -&gt; Int) -&gt; ([t], [t]) -&gt; (Int, Int)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I wrote <code>applyToTuple</code> without a full type signature. <code>:: (Int,Int)</code>
just makes sure my wanted result type and by the help of the list
destructuring <code>a@(x:xs)</code> I make sure that the type inference algorithm
will conclude
that I have a tuple of lists in mind. Consequently, the type of the
function given to <code>applyToTuple</code> is inferred to correspond to
<code>length</code>&rsquo;s type; at least, that&rsquo;s what I would expect naively.</p>

<p>However, type inference of <code>applyToTuple</code> does not result in the type I had
in mind. As we can see the types of lists in the tuple <code>([t],[t])</code> are
the same so that calling <code>applyToTuple length</code> with a heterogeneous
tuple like <code>("hallo",[1,2,3])</code> doesn&rsquo;t work. Being stubborn I could
then try &ldquo;forcing&rdquo; the type by providing a type signature:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">let</span> <span class="n">applyToTuple</span> <span class="ow">::</span> <span class="p">([</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Int</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">([</span><span class="n">b</span><span class="p">],[</span><span class="n">c</span><span class="p">])</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">);</span> <span class="n">applyToTuple</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="ow">=</span> <span class="p">(</span><span class="n">f</span> <span class="n">x</span><span class="p">,</span> <span class="n">f</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="c1">-- Couldn&#39;t match type `b&#39; with `a&#39; ...</span>
</span><span class='line'><span class="c1">-- Couldn&#39;t match type `c&#39; with `a&#39; ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>This attempt also fails as GHCI complains about the fact that the
types <code>b</code> and <code>a</code>, <code>c</code> and <code>a</code> respectively, do not match! However, the
<code>length</code>-like function <code>([a] -&gt; Int)</code> should be applicable to a list of
whatever type, shouldn&rsquo;t it?!? That&rsquo;s the moment
you&rsquo;d start doubting either GHCI or your mental health as you know precisely
that it <em>should be possible</em> to write such a function. After all, you
know intuitively that it <strong>is</strong> possible to apply a function like <code>length</code>
to both parts of a heterogeneous tuple of lists as in the code below;
doing that in a more generic way in a function like <code>applyToTuple</code>
should be possible as well!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="c1">-- Obviously, that works without a problem:</span>
</span><span class='line'><span class="p">(</span><span class="nf">\</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">length</span> <span class="n">a</span><span class="p">,</span> <span class="n">length</span> <span class="n">b</span><span class="p">))</span> <span class="p">(</span><span class="s">&quot;hallo&quot;</span><span class="p">,[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
</span><span class='line'><span class="c1">-- (5,3)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>applyToTuple :: (forall a.[a] &ndash;> Int) &ndash;> ([b],[c]) &ndash;> (Int, Int)</h2>

<p>Well, there is just one explanation: the type <code>([a] -&gt; Int)
-&gt;([b],[c]) -&gt; (Int, Int)</code> is not really what we need for our purpose.
In fact, we need <code>RankNTypes</code>!
We first enable the extension in GHCI and can then write the correct
<code>applyToTuple</code> implementation using the <code>forall</code> keyword in the type
of the first parameter function. (If you want to use the
<code>RankNTypes</code> extension in a file to compile, you actually need to add <code>{-#
LANGUAGE RankNTypes #-}</code> at the top of the file)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kt">:</span><span class="n">set</span> <span class="o">-</span><span class="kt">XRankNTypes</span>
</span><span class='line'><span class="kr">let</span> <span class="n">applyToTuple</span> <span class="ow">::</span> <span class="p">(</span><span class="n">forall</span> <span class="n">a</span><span class="o">.</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Int</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">([</span><span class="n">b</span><span class="p">],[</span><span class="n">c</span><span class="p">])</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">);</span> <span class="n">applyToTuple</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="ow">=</span> <span class="p">(</span><span class="n">f</span> <span class="n">x</span><span class="p">,</span> <span class="n">f</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="nf">applyToTuple</span> <span class="n">length</span> <span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
</span><span class='line'><span class="c1">-- (5,3)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This time it works! :&ndash;)</p>

<h2>Explanation</h2>

<p>We noted earlier that every Haskell type signature&rsquo;s type variables
are <em>implicitly</em> universally quantified by an &lsquo;invisible&rsquo; <code>forall</code>
section. Thus, under the hood we get the types as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="c1">-- just a reminder:</span>
</span><span class='line'><span class="c1">-- length :: forall a. [a] -&gt; Int </span>
</span><span class='line'><span class="kr">let</span> <span class="n">intLength</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Int</span><span class="p">;</span> <span class="n">intLength</span> <span class="ow">=</span> <span class="n">length</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--  applyToTuple:</span>
</span><span class='line'><span class="kr">let</span> <span class="n">applyToTuple</span> <span class="ow">::</span> <span class="n">forall</span> <span class="n">a</span> <span class="n">b</span> <span class="n">c</span><span class="o">.</span> <span class="p">([</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Int</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">([</span><span class="n">b</span><span class="p">],</span> <span class="p">[</span><span class="n">c</span><span class="p">])</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">);</span> <span class="n">applyToTuple</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="ow">=</span> <span class="p">(</span><span class="n">f</span> <span class="n">x</span><span class="p">,</span> <span class="n">f</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="c1">-- correct applyToTuple:</span>
</span><span class='line'><span class="kr">let</span> <span class="n">applyToTuple</span> <span class="ow">::</span> <span class="n">forall</span> <span class="n">b</span> <span class="n">c</span><span class="o">.</span> <span class="p">(</span><span class="n">forall</span> <span class="n">a</span><span class="o">.</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Int</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">([</span><span class="n">b</span><span class="p">],</span> <span class="p">[</span><span class="n">c</span><span class="p">])</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">);</span> <span class="n">applyToTuple</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="ow">=</span> <span class="p">(</span><span class="n">f</span> <span class="n">x</span><span class="p">,</span> <span class="n">f</span> <span class="n">y</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now things get clearer: The function in the type of the correct
<code>applyToTuple</code> has the type <code>(forall a. [a] -&gt; Int)</code> which is exactly
the type given for <code>length</code> above, hence it works. On the other hand,
the type <code>([a] -&gt; Int)</code> of the function parameter in the wrong
<code>applyToTuple</code> type signature <em>looks</em> like the type of <code>length</code> <strong>but it isn&rsquo;t</strong>!</p>

<p>Have a look at what the type
checker would &ldquo;think&rdquo; confronted with the wrong <code>applyToTuple</code> type
signature. When it reads the expression <code>applyToTuple length</code> it would
expect the type variables <code>a</code>, <code>b</code> and <code>c</code> to be <strong>different</strong>
concrete types, so <code>([a] -&gt; Int)</code> might become <code>([Char] -&gt; Int)</code> or
<code>([Int] -&gt; Int)</code> like our <code>intLength</code> function, shortly, some
<em>version</em> of <code>length</code>. In the implementation <code>(f x, f y)</code> seeks to apply that <em>version</em> of
<code>length</code> to two lists of <strong>different</strong> types &ndash; however, <strong>any</strong> <em>version</em> of
<code>length</code> expects its list to always be of 1 concrete type only, e.g. <code>Int</code> in
the case of our function <code>intLength</code>, consequently, the type checker
refuses the lists of the tuple to possibly be of different types!</p>

<p>Why does the correct definition of <code>applyToTuple</code> work then? It
expects a <code>length</code>-like function of type <code>(forall a. [a] -&gt; Int)</code>, that&rsquo;s a function
which works <strong>for all</strong> types <code>a</code>, no matter what type you throw at it!
Thus, it forces that function to be a polymorphic function just like
<code>length</code> and rules out any candidate <em>version</em> of <code>length</code> (like <code>intLength</code>) as a consequence.
Since you can throw a list of any type at that function it can deal with the 2
lists of different types and the code compiles!</p>

<h2>Conclusion</h2>

<p>Using <code>RankNTypes</code> and the <em>forall</em> keyword you can specify that a
function&rsquo;s argument needs to be a <em>polymorphic</em> function (like
<code>length</code> in our example). In spite of the fact that you can omit the top-level
<em>forall</em> in the type signature of a polymorphic type, you need to include
it when you reference it as a parameter.</p>

<p>In a future blog post I will investigate an important application of
<code>RankNTypes</code> in the Haskell standard library. It will be about the
<code>ST</code> monad which provides a <em>safe</em> environment for <strong>mutation</strong> in
Haskell with the help of <code>RankNTypes</code>. Mutation and Haskell?! Yes,
you can do it thanks to <code>RankNTypes</code>!</p>

<p><em>PS: There is a nice</em>
<a href="http://stackoverflow.com/questions/3071136/what-does-the-forall-keyword-in-haskell-ghc-do" target="_blank">stackoverflow thread</a> <em>which investigates the use of &ldquo;forall&rdquo; in other
language extensions as well. Actually, my &ldquo;applyToTuple&rdquo; function is based on</em>
<a href="http://stackoverflow.com/a/3071932/928944" target="_blank">that answer</a> of the thread.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Catalogue]]></title>
    <link href="http://sleepomeno.github.io/blog/2014/02/10/Book-Catalogue/"/>
    <updated>2014-02-10T00:00:00+01:00</updated>
    <id>http://sleepomeno.github.io/blog/2014/02/10/Book-Catalogue</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sleepomeno.github.io/images/book-catalogue.png" width="200"></p>

<p>A week ago I&rsquo;ve downloaded the app
<a href="https://play.google.com/store/apps/details?id=com.eleybourn.bookcatalogue&hl=de" target="_blank">Book Catalogue</a> from the Android Play store. As its name suggests it&rsquo;s
about creating a catalogue of your books. My family and I thought it would be handy
to file our books as we easily lose track of what books we actually own
and where we have stored them.</p>

<p><strong>Book Catalogue</strong> makes it all possible: adding books by scanning the
barcode, by ISBN, by searching author/title or by adding all
information manually. Of course, every book is stored to be in exactly
one bookshelf &ndash; you can create as many bookshelves as necessary and
can name them as you want.</p>

<!-- more -->


<p>In addition, <strong>Book Catalogue</strong> provides syncing to a <a href="http://www.goodreads.com/" target="_blank">GoodReads</a> account.
I was really looking forward to this as it would make sharing the
digital library with my family extremely easy&#x2026; but only in theory.
It turned out that the GoodReads API only allows books to be added if
the book already exists on GoodReads. Anyway, the app makes a good
job to actually inform you which books couldn&rsquo;t be uploaded
successfully. You could then add those books on the GoodReads web
site, however, it&rsquo;s very cumbersome to do that for all missing books;
so far, I have filed a few hundred books and about a fifth of them
GoodReads does not know. So the GoodReads sync option is not <em>really</em>
usable after all (especially if you have many old or rare books as
they are then likely to be unknown to GoodReads). Luckily, a CSV
import/export is provided as well so that I&rsquo;m not entirely dependent on
GoodReads&rsquo;s good will ;&ndash;)</p>

<p>Still, <strong>Book Catalogue</strong> really is a great app in my opinion (the imperfect GoodReads
API is not the app&rsquo;s fault). Firstly, it&rsquo;s interface is really beautiful and
provides nice ways to list the books in various ways. More
importantly, the identification of books by barcode and ISBN really
works well, including the downloading of meta information from several
sources like Amazon, LibraryThing, GoodReads and Google Books in
a blink!</p>

<p>Well, it needs to be mentioned that <strong>Book Catalogue</strong> is an Open Source
project and <a href="https://github.com/eleybourn/Book-Catalogue" target="_blank">can be found on GitHub</a>. So I might actually implement a
working syncing option when I&rsquo;m really convinced it&rsquo;s worth the work.
Until then I&rsquo;ll keep fiddling with CSV export files to keep
everybody&rsquo;s installation up-to-date on our shared library. It&rsquo;s not
perfect but it works&#x2026;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Blogging Matters]]></title>
    <link href="http://sleepomeno.github.io/blog/2014/02/07/Why-Blogging-Matters/"/>
    <updated>2014-02-07T00:00:00+01:00</updated>
    <id>http://sleepomeno.github.io/blog/2014/02/07/Why-Blogging-Matters</id>
    <content type="html"><![CDATA[<p>There is that fancy phrase &ldquo;pics or it didn&rsquo;t happen&rdquo;. It&rsquo;s just
claiming evidence for a, more or less, hardly credible experience which has often to do
with some sort of drug abuse. Yes, experience shows it&rsquo;s
sometimes cleverer to do without taking a photo, anyway, it crossed my mind that that phrase might be
applicable not only to excess-like experiences but to&#x2026; pretty much
everything in life.</p>

<!-- more -->


<p>I&rsquo;ll come back later to what that actually means.. actually, I&rsquo;ve just found a nice <a href="http://mdswanson.com/blog/2013/08/11/write-things-tell-people.html" target="_blank">blog post</a>
about the importance of running a blog as a developer which goes
nicely with what I&rsquo;ve been thinking. The author, Matt Swanson, says
&ldquo;Do things, write about it&rdquo; and explains how sharing his learning on
his blog has been incredibly rewarding: Firstly, people told him how much they
enjoy reading his posts (those compliments alone may be worth it!) and secondly, he gained reputation by
demonstrating his abilities and initiative. As a result, he somehow became some
sort of a &ldquo;super hero&rdquo; in people&rsquo;s minds although his posts are not
exactly rocket-science. Regular posts (content is still king!) and a
pretty straight-forward way of expressing things were enough to raise
his value&#x2026; the question is: Did Matt just fool his readers? Isn&rsquo;t he a clever guy after all?</p>

<p>Of course he is &ldquo;clever&rdquo;. He is &ldquo;clever&rdquo; <strong>because</strong> he shares his
projects, learnings and insights on his blog. Being a Software
developer, blogging about your projects is the most efficient way of
gaining an over-all reputation &ndash; a manager, who considers hiring you, won&rsquo;t read commit logs of Open Source
Projects where your name might appear but he can enjoy a well-written blog! In fact,
the &lsquo;positive&rsquo; effect on the manager&rsquo;s decision seems inevitable; and that&rsquo;s
where the &ldquo;pics or it didn&rsquo;t happen&rdquo; attitude comes into play. In
order to convey your abilities to the manager you need definite proof,
pretty similiar to the situation in court, actually: In the end, the
judge reaches a verdict and <strong>decides what is the truth</strong>. Analogously,
you will always <strong>be</strong> exactly as &ldquo;clever&rdquo; as your vis-à-vis, respectively the
readers of your blog, think you are! It goes without saying that you
can replace the word &ldquo;clever&rdquo; with whatever other positive quality you&rsquo;d
like to convey &ndash; &ldquo;competent&rdquo;, &ldquo;open-minded&rdquo;, &ldquo;innovative&rdquo;, &#x2026;, you
name it.</p>

<p>Funnily enough, you will actually get cleverer when you blog regularly
;&ndash;) Strange? Well, first let&rsquo;s get rid of the word &ldquo;clever&rdquo; once and
for all, it is somehow inaccurate &ndash; what I want to say is: You will
get better at those topics you&rsquo;re blogging about. (And that not only
applies to tech blogs!) The reason for that: The extra thinking
necessary for presenting your work in a nicely structured way on your
blog will actually force you to nicely structure your projects as
well! In addition, your inner urge to at least blog once, twice or X
times a week will actually force you to pursue your projects and
learnings &lsquo;cause otherwise you wouldn&rsquo;t have anything to blog about.
As a result, you&rsquo;ll inevitably get better at reasoning and get a
better understanding of your blog posts&rsquo; topics&#x2026; briefly, you get
&ldquo;cleverer&rdquo;! Isn&rsquo;t that ironic? ;&ndash;)</p>

<p>Anyway, I haven&rsquo;t been able to post regularly in the past, for
whatever reasons. In the end that always led to abandonning my past blogs altogether, so I&rsquo;m not
quite sure the above argumentation is too believable coming from me,
to be honest. However, for the moment, it is enough motivation for me to try a fresh
start with this blog. After all, it&rsquo;s all about motivation and inspiration.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A fresh start]]></title>
    <link href="http://sleepomeno.github.io/blog/2014/02/06/A-fresh-start/"/>
    <updated>2014-02-06T00:00:00+01:00</updated>
    <id>http://sleepomeno.github.io/blog/2014/02/06/A-fresh-start</id>
    <content type="html"><![CDATA[<p>2014 has just started a month ago and I&rsquo;ve painfully realized that I
didn&rsquo;t come up with any New Year&rsquo;s resolutions at that time. There is
no resolution to violate, consequently, no reason to feel bad at all &ndash;
so why not start a new blog which I could then feel bad about when I
post nothing for months?! Well, to be serious, that&rsquo;s at least how all
my blogging attempts have ended so far. I definitely don&rsquo;t know if
history will repeat itself again this time. Maybe this post will actually stay the
only post for two months? Any bets? ;&ndash;)</p>

<p>Anyway, I better shortly summarize what I plan blogging about. Being a
software developer, tech topics will probably dominate. Still I can&rsquo;t
promise not to rant about some random topic from time to time ;&ndash;) As
an Emacs user I might blog about my <strong>Elisp</strong> learning progress or other
stuff like the one and only <strong>org-mode</strong>. Using <strong>Octopress</strong> as my blogging
engine it will be unavoidable to mention it as well, ranging from
plugins and customizations to its philosophy. From time to time I&rsquo;d also
like talking about my journeys to <strong>Haskell</strong> wonderland and
<strong>Clojure(Script)</strong> development. Or mention some Android apps? There are
enough topics for sure, we&rsquo;ll see if there is enough motivation to
carry on blogging as well ;&ndash;)</p>

<p>Let&rsquo;s hope the best!</p>
]]></content>
  </entry>
  
</feed>
