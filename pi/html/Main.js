// Generated by psc version 0.6.8
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    
    function cons(e) {
      return function(l) {
        return [e].concat(l);
      };
    }
    ;
    
    function showNumberImpl(n) {
      return n.toString();
    }
    ;
    
    function numAdd(n1) {
      return function(n2) {
        return n1 + n2;
      };
    }
    ;
    
    function numSub(n1) {
      return function(n2) {
        return n1 - n2;
      };
    }
    ;
    
    function numMul(n1) {
      return function(n2) {
        return n1 * n2;
      };
    }
    ;
    
    function numDiv(n1) {
      return function(n2) {
        return n1 / n2;
      };
    }
    ;
    
    function refEq(r1) {
      return function(r2) {
        return r1 === r2;
      };
    }
    ;
    
    function refIneq(r1) {
      return function(r2) {
        return r1 !== r2;
      };
    }
    ;
    
    function concatString(s1) {
      return function(s2) {
        return s1 + s2;
      };
    }
    ;
    var Unit = function (x) {
        return x;
    };
    var Semigroupoid = function ($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
        this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
        this.id = id;
    };
    var Show = function (show) {
        this.show = show;
    };
    var Functor = function ($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    var Semiring = function ($times, $plus, one, zero) {
        this["*"] = $times;
        this["+"] = $plus;
        this.one = one;
        this.zero = zero;
    };
    var ModuloSemiring = function ($div, __superclass_Prelude$dotSemiring_0, mod) {
        this["/"] = $div;
        this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
        this.mod = mod;
    };
    var Ring = function ($minus, __superclass_Prelude$dotSemiring_0) {
        this["-"] = $minus;
        this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
    };
    var Eq = function ($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    var Semigroup = function ($less$greater) {
        this["<>"] = $less$greater;
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $eq$eq = function (dict) {
        return dict["=="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$less$less = function (dict) {
        return dict["<<<"];
    };
    var $greater$greater$greater = function (__dict_Semigroupoid_0) {
        return function (f) {
            return function (g) {
                return $less$less$less(__dict_Semigroupoid_0)(g)(f);
            };
        };
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $colon = cons;
    var $div = function (dict) {
        return dict["/"];
    };
    var $minus = function (dict) {
        return dict["-"];
    };
    var $plus = function (dict) {
        return dict["+"];
    };
    var $times = function (dict) {
        return dict["*"];
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var unit = {};
    var showNumber = new Show(showNumberImpl);
    var show = function (dict) {
        return dict.show;
    };
    var semiringNumber = new Semiring(numMul, numAdd, 1, 0);
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var semigroupString = new Semigroup(concatString);
    var ringNumber = new Ring(numSub, function () {
        return semiringNumber;
    });
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    var moduloSemiringNumber = new ModuloSemiring(numDiv, function () {
        return semiringNumber;
    }, function (_59) {
        return function (_60) {
            return 0;
        };
    });
    var liftA1 = function (__dict_Applicative_8) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_8["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_8)(f))(a);
            };
        };
    };
    var id = function (dict) {
        return dict.id;
    };
    var eqString = new Eq(refIneq, refEq);
    var $$const = function (_53) {
        return function (_54) {
            return _53;
        };
    };
    var $$void = function (__dict_Functor_10) {
        return function (fa) {
            return $less$dollar$greater(__dict_Functor_10)($$const(unit))(fa);
        };
    };
    var categoryArr = new Category(function () {
        return semigroupoidArr;
    }, function (x) {
        return x;
    });
    var ap = function (__dict_Monad_16) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(f)(function (_4) {
                    return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(a)(function (_3) {
                        return $$return(__dict_Monad_16)(_4(_3));
                    });
                });
            };
        };
    };
    return {
        Unit: Unit, 
        Semigroup: Semigroup, 
        Eq: Eq, 
        Ring: Ring, 
        ModuloSemiring: ModuloSemiring, 
        Semiring: Semiring, 
        Monad: Monad, 
        Bind: Bind, 
        Applicative: Applicative, 
        Apply: Apply, 
        Functor: Functor, 
        Show: Show, 
        Category: Category, 
        Semigroupoid: Semigroupoid, 
        unit: unit, 
        "<>": $less$greater, 
        refIneq: refIneq, 
        refEq: refEq, 
        "==": $eq$eq, 
        "-": $minus, 
        "/": $div, 
        "*": $times, 
        "+": $plus, 
        ap: ap, 
        "return": $$return, 
        ">>=": $greater$greater$eq, 
        liftA1: liftA1, 
        pure: pure, 
        "<*>": $less$times$greater, 
        "void": $$void, 
        "<$>": $less$dollar$greater, 
        show: show, 
        cons: cons, 
        ":": $colon, 
        "$": $dollar, 
        id: id, 
        ">>>": $greater$greater$greater, 
        "<<<": $less$less$less, 
        "const": $$const, 
        semigroupoidArr: semigroupoidArr, 
        categoryArr: categoryArr, 
        showNumber: showNumber, 
        semiringNumber: semiringNumber, 
        ringNumber: ringNumber, 
        moduloSemiringNumber: moduloSemiringNumber, 
        eqString: eqString, 
        semigroupString: semigroupString
    };
})();
var PS = PS || {};
PS.$$Math = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var cos = Math.cos;;
    function pow(n){  return function(p) {    return Math.pow(n, p);  }};
    var round = Math.round;;
    var sin = Math.sin;;
    var sqrt = Math.sqrt;;
    var pi      = Math.PI;;
    return {
        pi: pi, 
        sqrt: sqrt, 
        sin: sin, 
        round: round, 
        pow: pow, 
        cos: cos
    };
})();
var PS = PS || {};
PS.Global = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function readInt(radix) {  return function(n) {    return parseInt(n, radix);  };};
    return {
        readInt: readInt
    };
})();
var PS = PS || {};
PS.Data_Exists = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function mkExists(fa) {  return fa;};
    function runExists(f) {  return function(fa) {    return f(fa);  };};
    return {
        runExists: runExists, 
        mkExists: mkExists
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function returnE(a) {
      return function() {
        return a;
      };
    }
    ;
    
    function bindE(a) {
      return function(f) {
        return function() {
          return f(a())();
        };
      };
    }
    ;
    
    function untilE(f) {
      return function() {
        while (!f());
        return {};
      };
    }
    ;
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        untilE: untilE, 
        functorEff: functorEff, 
        applyEff: applyEff, 
        applicativeEff: applicativeEff, 
        bindEff: bindEff, 
        monadEff: monadEff
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
    function unsafeInterleaveEff(f) {
      return f;
    }
    ;
    return {
        unsafeInterleaveEff: unsafeInterleaveEff
    };
})();
var PS = PS || {};
PS.Control_Monad_ST = (function () {
    "use strict";
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Prelude = PS.Prelude;
    
    function newSTRef(val) {
      return function() {
        return { value: val };
      };
    }
    ;
    
    function readSTRef(ref) {
      return function() {
        return ref.value;
      };
    }
    ;
    
    function writeSTRef(ref) {
      return function(a) {
        return function() {
          return ref.value = a;
        };
      };
    }
    ;
    
    function runST(f) {
      return f;
    }
    ;
    return {
        runST: runST, 
        writeSTRef: writeSTRef, 
        readSTRef: readSTRef, 
        newSTRef: newSTRef
    };
})();
var PS = PS || {};
PS.Graphics_Canvas = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    function getCanvasElementById(id) {  return function() {    return document.getElementById(id);  };};
    function getContext2D(c) {  return function() {    return c.getContext('2d');  };};
    function getCanvasWidth(canvas){  return function(){    return canvas.width;  };};;
    function getCanvasHeight(canvas){  return function(){    return canvas.height;  };};;
    function setLineWidth(width) {  return function(ctx) {    return function() {      ctx.lineWidth = width;      return ctx;    };  };};
    function setFillStyle(style) {  return function(ctx) {    return function() {      ctx.fillStyle = style;      return ctx;    };  };};
    function setStrokeStyle(style) {  return function(ctx) {    return function() {      ctx.strokeStyle = style;      return ctx;    };  };};
    function setShadowColor(color) {  return function(ctx) {    return function() {      ctx.shadowColor = color;      return ctx;    };  };};
    function setShadowBlur(blur) {  return function(ctx) {    return function() {      ctx.shadowBlur = blur;      return ctx;    };  };};
    function setShadowOffsetX(offsetX) {  return function(ctx) {    return function() {      ctx.shadowOffsetX = offsetX;      return ctx;    };  };};
    function setShadowOffsetY(offsetY) {  return function(ctx) {    return function() {      ctx.shadowOffsetY = offsetY;      return ctx;    };  };};
    function setLineCapImpl(cap){  return function(ctx) {    return function() {      ctx.lineCap = cap;      return ctx;    };  };};
    function setGlobalCompositeOperationImpl(ctx) {  return function(op) {    return function() {      ctx.globalCompositeOperation = op;      return ctx;    };  };};
    function setGlobalAlpha(ctx) {  return function(alpha) {    return function() {      ctx.setGlobalAlpha = alpha;      return ctx;    };  };};
    function beginPath(ctx) {  return function() {    ctx.beginPath();    return ctx;  };};
    function stroke(ctx) {  return function() {    ctx.stroke();    return ctx;  };};
    function fill(ctx) {  return function() {    ctx.fill();    return ctx;  };};
    function clip(ctx) {  return function() {    ctx.clip();    return ctx;  };};
    function lineTo(ctx) {  return function(x) {    return function(y) {      return function() {        ctx.lineTo(x, y);        return ctx;      };    };  };};
    function moveTo(ctx) {  return function(x) {    return function(y) {      return function() {        ctx.moveTo(x, y);        return ctx;      };    };  };};
    function closePath(ctx) {  return function() {    ctx.closePath();    return ctx;  };};
    function arc(ctx) {  return function(a) {    return function() {      ctx.arc(a.x, a.y, a.r, a.start, a.end);      return ctx;    };  };};
    function rect(ctx) {  return function(r) {    return function() {      ctx.rect(r.x, r.y, r.w, r.h);      return ctx;    };  };};
    function clearRect(ctx) {  return function(r) {    return function() {      ctx.clearRect(r.x, r.y, r.w, r.h);      return ctx;    };  };};
    function scale(t) {  return function(ctx) {    return function() {      ctx.scale(t.scaleX, t.scaleY);      return ctx;    };  };};
    function rotate(angle) {  return function(ctx) {    return function() {      ctx.rotate(angle);      return ctx;    };  };};
    function translate(t) {  return function(ctx) {    return function() {      ctx.translate(t.translateX, t.translateY);      return ctx;    };  };};
    function transform(t) {  return function(ctx) {    return function() {      ctx.transform(t.m11, t.m12, t.m21, t.m22, t.m31, t.m32);      return ctx;    };  };};
    function setFont(fontspec) {  return function(ctx) {    return function() {      ctx.font = fontspec;      return ctx;    };  };};
    function fillText(ctx) {  return function(text) {    return function(x) {      return function(y) {        return function() {          ctx.fillText(text, x, y);          return ctx;        };      };    };  };};
    function strokeText(ctx) {  return function(text) {    return function(x) {      return function(y) {        return function() {          ctx.fillText(text, x, y);          return ctx;        };      };    };  };};
    function measureText(ctx) {  return function(text) {    return function() {      return ctx.measureText(text);    };  };};
    function save(ctx) {  return function() {    ctx.save();    return ctx;  };};
    function restore(ctx) {  return function() {    ctx.restore();    return ctx;  };};
    function getImageData(ctx) {  return function(x) {    return function(y) {      return function(w) {        return function(h) {          return function() { return ctx.getImageData(x, y, w, h); };        };      };    };  };};
    function putImageData(ctx) {  return function(image_data) {    return function(x) {      return function(y) {        return function() {          ctx.putImageData(image_data, x, y);          return ctx;        };      };    };  };};
    var Round = (function () {
        function Round() {

        };
        Round.value = new Round();
        return Round;
    })();
    var Square = (function () {
        function Square() {

        };
        Square.value = new Square();
        return Square;
    })();
    var Butt = (function () {
        function Butt() {

        };
        Butt.value = new Butt();
        return Butt;
    })();
    var SourceOver = (function () {
        function SourceOver() {

        };
        SourceOver.value = new SourceOver();
        return SourceOver;
    })();
    var SourceIn = (function () {
        function SourceIn() {

        };
        SourceIn.value = new SourceIn();
        return SourceIn;
    })();
    var SourceOut = (function () {
        function SourceOut() {

        };
        SourceOut.value = new SourceOut();
        return SourceOut;
    })();
    var SourceAtop = (function () {
        function SourceAtop() {

        };
        SourceAtop.value = new SourceAtop();
        return SourceAtop;
    })();
    var DestinationOver = (function () {
        function DestinationOver() {

        };
        DestinationOver.value = new DestinationOver();
        return DestinationOver;
    })();
    var DestinationIn = (function () {
        function DestinationIn() {

        };
        DestinationIn.value = new DestinationIn();
        return DestinationIn;
    })();
    var DestinationOut = (function () {
        function DestinationOut() {

        };
        DestinationOut.value = new DestinationOut();
        return DestinationOut;
    })();
    var DestinationAtop = (function () {
        function DestinationAtop() {

        };
        DestinationAtop.value = new DestinationAtop();
        return DestinationAtop;
    })();
    var Lighter = (function () {
        function Lighter() {

        };
        Lighter.value = new Lighter();
        return Lighter;
    })();
    var Copy = (function () {
        function Copy() {

        };
        Copy.value = new Copy();
        return Copy;
    })();
    var Xor = (function () {
        function Xor() {

        };
        Xor.value = new Xor();
        return Xor;
    })();
    var showComposite = new Prelude.Show(function (_79) {
        if (_79 instanceof SourceOver) {
            return "source-over";
        };
        if (_79 instanceof SourceIn) {
            return "source-in";
        };
        if (_79 instanceof SourceOut) {
            return "source-out";
        };
        if (_79 instanceof SourceAtop) {
            return "source-atop";
        };
        if (_79 instanceof DestinationOver) {
            return "destination-over";
        };
        if (_79 instanceof DestinationIn) {
            return "destination-in";
        };
        if (_79 instanceof DestinationOut) {
            return "destination-out";
        };
        if (_79 instanceof DestinationAtop) {
            return "destination-atop";
        };
        if (_79 instanceof Lighter) {
            return "lighter";
        };
        if (_79 instanceof Copy) {
            return "copy";
        };
        if (_79 instanceof Xor) {
            return "xor";
        };
        throw new Error("Failed pattern match");
    });
    var setLineCap = function (_78) {
        if (_78 instanceof Round) {
            return setLineCapImpl("round");
        };
        if (_78 instanceof Square) {
            return setLineCapImpl("square");
        };
        if (_78 instanceof Butt) {
            return setLineCapImpl("butt");
        };
        throw new Error("Failed pattern match");
    };
    var setGlobalCompositeOperation = function (ctx) {
        return function (composite) {
            return setGlobalCompositeOperationImpl(ctx)(Prelude.show(showComposite)(composite));
        };
    };
    var getCanvasDimensions = function (ce) {
        return function __do() {
            var _6 = getCanvasWidth(ce)();
            var _5 = getCanvasHeight(ce)();
            return {
                width: _6, 
                height: _5
            };
        };
    };
    return {
        SourceOver: SourceOver, 
        SourceIn: SourceIn, 
        SourceOut: SourceOut, 
        SourceAtop: SourceAtop, 
        DestinationOver: DestinationOver, 
        DestinationIn: DestinationIn, 
        DestinationOut: DestinationOut, 
        DestinationAtop: DestinationAtop, 
        Lighter: Lighter, 
        Copy: Copy, 
        Xor: Xor, 
        Round: Round, 
        Square: Square, 
        Butt: Butt, 
        putImageData: putImageData, 
        getImageData: getImageData, 
        restore: restore, 
        save: save, 
        measureText: measureText, 
        strokeText: strokeText, 
        fillText: fillText, 
        setFont: setFont, 
        transform: transform, 
        translate: translate, 
        rotate: rotate, 
        scale: scale, 
        clearRect: clearRect, 
        rect: rect, 
        arc: arc, 
        closePath: closePath, 
        moveTo: moveTo, 
        lineTo: lineTo, 
        clip: clip, 
        fill: fill, 
        stroke: stroke, 
        beginPath: beginPath, 
        setGlobalAlpha: setGlobalAlpha, 
        setGlobalCompositeOperation: setGlobalCompositeOperation, 
        setGlobalCompositeOperationImpl: setGlobalCompositeOperationImpl, 
        setLineCap: setLineCap, 
        setLineCapImpl: setLineCapImpl, 
        setShadowOffsetY: setShadowOffsetY, 
        setShadowOffsetX: setShadowOffsetX, 
        setShadowBlur: setShadowBlur, 
        setShadowColor: setShadowColor, 
        setStrokeStyle: setStrokeStyle, 
        setFillStyle: setFillStyle, 
        setLineWidth: setLineWidth, 
        getCanvasDimensions: getCanvasDimensions, 
        getCanvasHeight: getCanvasHeight, 
        getCanvasWidth: getCanvasWidth, 
        getContext2D: getContext2D, 
        getCanvasElementById: getCanvasElementById, 
        showComposite: showComposite
    };
})();
var PS = PS || {};
PS.Control_Monad = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var when = function (__dict_Monad_26) {
        return function (_88) {
            return function (_89) {
                if (_88) {
                    return _89;
                };
                if (!_88) {
                    return Prelude["return"](__dict_Monad_26)(Prelude.unit);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    return {
        when: when
    };
})();
var PS = PS || {};
PS.Data_Coyoneda = (function () {
    "use strict";
    var Data_Exists = PS.Data_Exists;
    var Prelude = PS.Prelude;
    var Control_Extend = PS.Control_Extend;
    var Control_Comonad = PS.Control_Comonad;
    var Control_Monad_Trans = PS.Control_Monad_Trans;
    var CoyonedaF = function (x) {
        return x;
    };
    var Coyoneda = function (x) {
        return x;
    };
    var lowerCoyoneda = function (__dict_Functor_41) {
        return function (_101) {
            return Data_Exists.runExists(function (_99) {
                return Prelude["<$>"](__dict_Functor_41)(_99.k)(_99.fi);
            })(_101);
        };
    };
    var liftCoyoneda = function (fa) {
        return Coyoneda(Data_Exists.mkExists({
            k: Prelude.id(Prelude.categoryArr), 
            fi: fa
        }));
    };
    var coyoneda = function (k) {
        return function (fi) {
            return Coyoneda(Data_Exists.mkExists({
                k: k, 
                fi: fi
            }));
        };
    };
    var functorCoyoneda = new Prelude.Functor(function (_104) {
        return function (_105) {
            return Data_Exists.runExists(function (_95) {
                return coyoneda(Prelude["<<<"](Prelude.semigroupoidArr)(_104)(_95.k))(_95.fi);
            })(_105);
        };
    });
    var liftCoyonedaT = function (_102) {
        return function (_103) {
            return Data_Exists.runExists(function (_100) {
                return coyoneda(_100.k)(_102(_100.fi));
            })(_103);
        };
    };
    var liftCoyonedaTF = function (__dict_Functor_44) {
        return function (nat) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(lowerCoyoneda(__dict_Functor_44))(liftCoyonedaT(nat));
        };
    };
    return {
        CoyonedaF: CoyonedaF, 
        Coyoneda: Coyoneda, 
        liftCoyonedaTF: liftCoyonedaTF, 
        liftCoyonedaT: liftCoyonedaT, 
        lowerCoyoneda: lowerCoyoneda, 
        liftCoyoneda: liftCoyoneda, 
        coyoneda: coyoneda, 
        functorCoyoneda: functorCoyoneda
    };
})();
var PS = PS || {};
PS.Data_Either = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Left = (function () {
        function Left(value0) {
            this.value0 = value0;
        };
        Left.create = function (value0) {
            return new Left(value0);
        };
        return Left;
    })();
    var Right = (function () {
        function Right(value0) {
            this.value0 = value0;
        };
        Right.create = function (value0) {
            return new Right(value0);
        };
        return Right;
    })();
    return {
        Left: Left, 
        Right: Right
    };
})();
var PS = PS || {};
PS.Data_Array = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
    function range (start) {  return function (end) {    var i = ~~start, e = ~~end;    var step = i > e ? -1 : 1;    var result = [i], n = 1;    while (i !== e) {      i += step;      result[n++] = i;    }    return result;  };};
    var $dot$dot = range;
    var functorArray = new Prelude.Functor(map);
    return {
        range: range, 
        map: map, 
        "..": $dot$dot, 
        functorArray: functorArray
    };
})();
var PS = PS || {};
PS.Control_Monad_JQuery = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Foreign = PS.Data_Foreign;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var DOM = PS.DOM;
    
  function select(selector) {
    return function () {
      return jQuery(selector);
    };
  }
  ;
    
  function getProp(p) {
    return function(ob) {
      return function () {
        return ob.prop(p);
      };
    };
  }
  ;
    
  function setText(text) {
    return function(ob) {
      return function() {
        return ob.text(text);
      };
    };
  }
  ;
    
  function getValue(ob) {
    return function() {
      return ob.val();
    };
  }
  ;
    return {
        getValue: getValue, 
        setText: setText, 
        getProp: getProp, 
        select: select
    };
})();
var PS = PS || {};
PS.Data_Array_Unsafe = (function () {
    "use strict";
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Maybe_Unsafe = PS.Data_Maybe_Unsafe;
    var tail = function (_207) {
        if (_207.length >= 1) {
            var _588 = _207.slice(1);
            return _588;
        };
        throw new Error("Failed pattern match");
    };
    var head = function (_206) {
        if (_206.length >= 1) {
            var _591 = _206.slice(1);
            return _206[0];
        };
        throw new Error("Failed pattern match");
    };
    return {
        tail: tail, 
        head: head
    };
})();
var PS = PS || {};
PS.Data_Monoid = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Maybe = PS.Data_Maybe;
    var mempty = function (dict) {
        return dict.mempty;
    };
    return {
        mempty: mempty
    };
})();
var PS = PS || {};
PS.Data_Foldable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Apply = PS.Control_Apply;
    var Data_Monoid_First = PS.Data_Monoid_First;
    var Data_Either = PS.Data_Either;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid_Additive = PS.Data_Monoid_Additive;
    var Data_Monoid_Dual = PS.Data_Monoid_Dual;
    var Data_Monoid_Last = PS.Data_Monoid_Last;
    var Data_Monoid_Multiplicative = PS.Data_Monoid_Multiplicative;
    var Data_Tuple = PS.Data_Tuple;
    
  function foldrArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = xs.length - 1; i >= 0; --i) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  }
  ;
    
  function foldlArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = 0, len = xs.length; i < len; ++i) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  }
  ;
    var Foldable = function (foldMap, foldl, foldr) {
        this.foldMap = foldMap;
        this.foldl = foldl;
        this.foldr = foldr;
    };
    var foldr = function (dict) {
        return dict.foldr;
    };
    var foldableArray = new Foldable(function (__dict_Monoid_289) {
        return function (f) {
            return function (xs) {
                return foldr(foldableArray)(function (x) {
                    return function (acc) {
                        return Prelude["<>"](__dict_Monoid_289["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                    };
                })(Data_Monoid.mempty(__dict_Monoid_289))(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldlArray(f)(z)(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldrArray(f)(z)(xs);
            };
        };
    });
    return {
        Foldable: Foldable, 
        foldlArray: foldlArray, 
        foldrArray: foldrArray, 
        foldr: foldr, 
        foldableArray: foldableArray
    };
})();
var PS = PS || {};
PS.Data_Traversable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Either = PS.Data_Either;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid_Additive = PS.Data_Monoid_Additive;
    var Data_Monoid_Dual = PS.Data_Monoid_Dual;
    var Data_Monoid_First = PS.Data_Monoid_First;
    var Data_Monoid_Last = PS.Data_Monoid_Last;
    var Data_Monoid_Multiplicative = PS.Data_Monoid_Multiplicative;
    var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
        this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
        this.sequence = sequence;
        this.traverse = traverse;
    };
    var traverse = function (dict) {
        return dict.traverse;
    };
    var sequence = function (dict) {
        return dict.sequence;
    };
    var traversableArray = new Traversable(function () {
        return Data_Foldable.foldableArray;
    }, function () {
        return Data_Array.functorArray;
    }, function (__dict_Applicative_318) {
        return function (_469) {
            if (_469.length === 0) {
                return Prelude.pure(__dict_Applicative_318)([  ]);
            };
            if (_469.length >= 1) {
                var _594 = _469.slice(1);
                return Prelude["<*>"](__dict_Applicative_318["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_318["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_469[0]))(sequence(traversableArray)(__dict_Applicative_318)(_594));
            };
            throw new Error("Failed pattern match");
        };
    }, function (__dict_Applicative_317) {
        return function (_467) {
            return function (_468) {
                if (_468.length === 0) {
                    return Prelude.pure(__dict_Applicative_317)([  ]);
                };
                if (_468.length >= 1) {
                    var _598 = _468.slice(1);
                    return Prelude["<*>"](__dict_Applicative_317["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_317["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_467(_468[0])))(traverse(traversableArray)(__dict_Applicative_317)(_467)(_598));
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    return {
        Traversable: Traversable, 
        sequence: sequence, 
        traverse: traverse, 
        traversableArray: traversableArray
    };
})();
var PS = PS || {};
PS.Control_Monad_Rec_Class = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Identity = PS.Data_Identity;
    var Control_Monad_Eff_Unsafe = PS.Control_Monad_Eff_Unsafe;
    var Control_Monad_ST = PS.Control_Monad_ST;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_Maybe_Trans = PS.Control_Monad_Maybe_Trans;
    var Control_Monad_Error_Trans = PS.Control_Monad_Error_Trans;
    var Control_Monad_Writer_Trans = PS.Control_Monad_Writer_Trans;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Monad_State_Trans = PS.Control_Monad_State_Trans;
    var Control_Functor = PS.Control_Functor;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Either = PS.Data_Either;
    var Data_Function = PS.Data_Function;
    var Data_Tuple = PS.Data_Tuple;
    var Control_Monad_Error = PS.Control_Monad_Error;
    var MonadRec = function (__superclass_Prelude$dotMonad_0, tailRecM) {
        this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
        this.tailRecM = tailRecM;
    };
    var tailRecM = function (dict) {
        return dict.tailRecM;
    };
    var tailRecEff = function (f) {
        return function (a) {
            var fromRight = function (_528) {
                if (_528 instanceof Data_Either.Right) {
                    return _528.value0;
                };
                throw new Error("Failed pattern match");
            };
            var f$prime = Prelude["<<<"](Prelude.semigroupoidArr)(Control_Monad_Eff_Unsafe.unsafeInterleaveEff)(f);
            return function __do() {
                var _35 = f$prime(a)();
                var _34 = {
                    value: _35
                };
                (function () {
                    while (!(function __do() {
                        var _33 = _34.value;
                        return (function () {
                            if (_33 instanceof Data_Either.Left) {
                                return function __do() {
                                    var _32 = f$prime(_33.value0)();
                                    _34.value = _32;
                                    return false;
                                };
                            };
                            if (_33 instanceof Data_Either.Right) {
                                return Prelude["return"](Control_Monad_Eff.monadEff)(true);
                            };
                            throw new Error("Failed pattern match");
                        })()();
                    })()) {

                    };
                    return {};
                })();
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(fromRight)(Control_Monad_ST.readSTRef(_34))();
            };
        };
    };
    var monadRecEff = new MonadRec(function () {
        return Control_Monad_Eff.monadEff;
    }, tailRecEff);
    return {
        MonadRec: MonadRec, 
        tailRecM: tailRecM, 
        monadRecEff: monadRecEff
    };
})();
var PS = PS || {};
PS.Control_Monad_Free = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Coyoneda = PS.Data_Coyoneda;
    var Data_Either = PS.Data_Either;
    var Data_Inject = PS.Data_Inject;
    var Data_Identity = PS.Data_Identity;
    var Control_Monad_Rec_Class = PS.Control_Monad_Rec_Class;
    var Control_Monad_Trans = PS.Control_Monad_Trans;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Data_Function = PS.Data_Function;
    var Pure = (function () {
        function Pure(value0) {
            this.value0 = value0;
        };
        Pure.create = function (value0) {
            return new Pure(value0);
        };
        return Pure;
    })();
    var Free = (function () {
        function Free(value0) {
            this.value0 = value0;
        };
        Free.create = function (value0) {
            return new Free(value0);
        };
        return Free;
    })();
    var Gosub = (function () {
        function Gosub(value0) {
            this.value0 = value0;
        };
        Gosub.create = function (value0) {
            return new Gosub(value0);
        };
        return Gosub;
    })();
    var MonadFree = function (wrap) {
        this.wrap = wrap;
    };
    var wrap = function (dict) {
        return dict.wrap;
    };
    var monadFreeFree = function (__dict_Functor_463) {
        return new MonadFree(Free.create);
    };
    var liftF = function (__dict_Functor_467) {
        return function (__dict_Monad_468) {
            return function (__dict_MonadFree_469) {
                return Prelude["<<<"](Prelude.semigroupoidArr)(wrap(__dict_MonadFree_469))(Prelude["<$>"](__dict_Functor_467)(Prelude["return"](__dict_Monad_468)));
            };
        };
    };
    var monadFree = function (__dict_Functor_464) {
        return new Prelude.Monad(function () {
            return applicativeFree(__dict_Functor_464);
        }, function () {
            return bindFree(__dict_Functor_464);
        });
    };
    var functorFree = function (__dict_Functor_472) {
        return new Prelude.Functor(function (_531) {
            return function (_532) {
                if (_532 instanceof Pure) {
                    return new Pure(_531(_532.value0));
                };
                return Prelude.liftA1(applicativeFree(__dict_Functor_472))(_531)(_532);
            };
        });
    };
    var bindFree = function (__dict_Functor_473) {
        return new Prelude.Bind(function (_533) {
            return function (_534) {
                if (_533 instanceof Gosub) {
                    return new Gosub(function (h) {
                        return _533.value0(function (a) {
                            return function (i) {
                                return h(a)(function (x) {
                                    return new Gosub(function (j) {
                                        return j(Prelude["const"](i(x)))(_534);
                                    });
                                });
                            };
                        });
                    });
                };
                return new Gosub(function (h) {
                    return h(Prelude["const"](_533))(_534);
                });
            };
        }, function () {
            return applyFree(__dict_Functor_473);
        });
    };
    var applyFree = function (__dict_Functor_474) {
        return new Prelude.Apply(Prelude.ap(monadFree(__dict_Functor_474)), function () {
            return functorFree(__dict_Functor_474);
        });
    };
    var applicativeFree = function (__dict_Functor_475) {
        return new Prelude.Applicative(function () {
            return applyFree(__dict_Functor_475);
        }, Pure.create);
    };
    var resume = function (__copy___dict_Functor_456) {
        return function (__copy_f) {
            var __dict_Functor_456 = __copy___dict_Functor_456;
            var f = __copy_f;
            tco: while (true) {
                var resumeGosub = function (_535) {
                    if (_535 instanceof Gosub) {
                        return _535.value0(function (a) {
                            return function (g) {
                                var _615 = a(Prelude.unit);
                                if (_615 instanceof Pure) {
                                    return new Data_Either.Right(g(_615.value0));
                                };
                                if (_615 instanceof Free) {
                                    return new Data_Either.Left(Prelude["<$>"](__dict_Functor_456)(function (h) {
                                        return Prelude[">>="](bindFree(__dict_Functor_456))(h)(g);
                                    })(_615.value0));
                                };
                                if (_615 instanceof Gosub) {
                                    return new Data_Either.Right(_615.value0(function (b) {
                                        return function (i) {
                                            return Prelude[">>="](bindFree(__dict_Functor_456))(b(Prelude.unit))(function (x) {
                                                return Prelude[">>="](bindFree(__dict_Functor_456))(i(x))(g);
                                            });
                                        };
                                    }));
                                };
                                throw new Error("Failed pattern match");
                            };
                        });
                    };
                    throw new Error("Failed pattern match");
                };
                if (f instanceof Pure) {
                    return new Data_Either.Right(f.value0);
                };
                if (f instanceof Free) {
                    return new Data_Either.Left(f.value0);
                };
                var _623 = resumeGosub(f);
                if (_623 instanceof Data_Either.Left) {
                    return new Data_Either.Left(_623.value0);
                };
                if (_623 instanceof Data_Either.Right) {
                    var __tco___dict_Functor_456 = __dict_Functor_456;
                    __dict_Functor_456 = __tco___dict_Functor_456;
                    f = _623.value0;
                    continue tco;
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var runFreeM = function (__dict_Functor_457) {
        return function (__dict_MonadRec_458) {
            return function (fn) {
                return Control_Monad_Rec_Class.tailRecM(__dict_MonadRec_458)(function (f) {
                    var _626 = resume(__dict_Functor_457)(f);
                    if (_626 instanceof Data_Either.Left) {
                        return Prelude["<$>"]((((__dict_MonadRec_458["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Left.create)(fn(_626.value0));
                    };
                    if (_626 instanceof Data_Either.Right) {
                        return Prelude["return"](__dict_MonadRec_458["__superclass_Prelude.Monad_0"]())(new Data_Either.Right(_626.value0));
                    };
                    throw new Error("Failed pattern match");
                });
            };
        };
    };
    var runFreeCM = function (__dict_MonadRec_460) {
        return function (nat) {
            return runFreeM(Data_Coyoneda.functorCoyoneda)(__dict_MonadRec_460)(Data_Coyoneda.liftCoyonedaTF((((__dict_MonadRec_460["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(nat));
        };
    };
    var liftFC = Prelude["<<<"](Prelude.semigroupoidArr)(liftF(Data_Coyoneda.functorCoyoneda)(monadFree(Data_Coyoneda.functorCoyoneda))(monadFreeFree(Data_Coyoneda.functorCoyoneda)))(Data_Coyoneda.liftCoyoneda);
    return {
        Pure: Pure, 
        Free: Free, 
        Gosub: Gosub, 
        MonadFree: MonadFree, 
        runFreeCM: runFreeCM, 
        runFreeM: runFreeM, 
        liftFC: liftFC, 
        liftF: liftF, 
        wrap: wrap, 
        functorFree: functorFree, 
        applyFree: applyFree, 
        applicativeFree: applicativeFree, 
        bindFree: bindFree, 
        monadFree: monadFree, 
        monadFreeFree: monadFreeFree
    };
})();
var PS = PS || {};
PS.Graphics_Canvas_Free = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Free = PS.Control_Monad_Free;
    var Graphics_Canvas = PS.Graphics_Canvas;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Data_Coyoneda = PS.Data_Coyoneda;
    var Control_Monad_Rec_Class = PS.Control_Monad_Rec_Class;
    var SetLineWidth = (function () {
        function SetLineWidth(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        SetLineWidth.create = function (value0) {
            return function (value1) {
                return new SetLineWidth(value0, value1);
            };
        };
        return SetLineWidth;
    })();
    var SetFillStyle = (function () {
        function SetFillStyle(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        SetFillStyle.create = function (value0) {
            return function (value1) {
                return new SetFillStyle(value0, value1);
            };
        };
        return SetFillStyle;
    })();
    var SetStrokeStyle = (function () {
        function SetStrokeStyle(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        SetStrokeStyle.create = function (value0) {
            return function (value1) {
                return new SetStrokeStyle(value0, value1);
            };
        };
        return SetStrokeStyle;
    })();
    var SetShadowColor = (function () {
        function SetShadowColor(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        SetShadowColor.create = function (value0) {
            return function (value1) {
                return new SetShadowColor(value0, value1);
            };
        };
        return SetShadowColor;
    })();
    var SetShadowBlur = (function () {
        function SetShadowBlur(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        SetShadowBlur.create = function (value0) {
            return function (value1) {
                return new SetShadowBlur(value0, value1);
            };
        };
        return SetShadowBlur;
    })();
    var SetShadowOffsetX = (function () {
        function SetShadowOffsetX(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        SetShadowOffsetX.create = function (value0) {
            return function (value1) {
                return new SetShadowOffsetX(value0, value1);
            };
        };
        return SetShadowOffsetX;
    })();
    var SetShadowOffsetY = (function () {
        function SetShadowOffsetY(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        SetShadowOffsetY.create = function (value0) {
            return function (value1) {
                return new SetShadowOffsetY(value0, value1);
            };
        };
        return SetShadowOffsetY;
    })();
    var SetLineCap = (function () {
        function SetLineCap(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        SetLineCap.create = function (value0) {
            return function (value1) {
                return new SetLineCap(value0, value1);
            };
        };
        return SetLineCap;
    })();
    var SetComposite = (function () {
        function SetComposite(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        SetComposite.create = function (value0) {
            return function (value1) {
                return new SetComposite(value0, value1);
            };
        };
        return SetComposite;
    })();
    var SetAlpha = (function () {
        function SetAlpha(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        SetAlpha.create = function (value0) {
            return function (value1) {
                return new SetAlpha(value0, value1);
            };
        };
        return SetAlpha;
    })();
    var BeginPath = (function () {
        function BeginPath(value0) {
            this.value0 = value0;
        };
        BeginPath.create = function (value0) {
            return new BeginPath(value0);
        };
        return BeginPath;
    })();
    var Stroke = (function () {
        function Stroke(value0) {
            this.value0 = value0;
        };
        Stroke.create = function (value0) {
            return new Stroke(value0);
        };
        return Stroke;
    })();
    var Fill = (function () {
        function Fill(value0) {
            this.value0 = value0;
        };
        Fill.create = function (value0) {
            return new Fill(value0);
        };
        return Fill;
    })();
    var Clip = (function () {
        function Clip(value0) {
            this.value0 = value0;
        };
        Clip.create = function (value0) {
            return new Clip(value0);
        };
        return Clip;
    })();
    var LineTo = (function () {
        function LineTo(value0, value1, value2) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
        };
        LineTo.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return new LineTo(value0, value1, value2);
                };
            };
        };
        return LineTo;
    })();
    var MoveTo = (function () {
        function MoveTo(value0, value1, value2) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
        };
        MoveTo.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return new MoveTo(value0, value1, value2);
                };
            };
        };
        return MoveTo;
    })();
    var ClosePath = (function () {
        function ClosePath(value0) {
            this.value0 = value0;
        };
        ClosePath.create = function (value0) {
            return new ClosePath(value0);
        };
        return ClosePath;
    })();
    var Arc = (function () {
        function Arc(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Arc.create = function (value0) {
            return function (value1) {
                return new Arc(value0, value1);
            };
        };
        return Arc;
    })();
    var Rect = (function () {
        function Rect(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Rect.create = function (value0) {
            return function (value1) {
                return new Rect(value0, value1);
            };
        };
        return Rect;
    })();
    var Scale = (function () {
        function Scale(value0, value1, value2) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
        };
        Scale.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return new Scale(value0, value1, value2);
                };
            };
        };
        return Scale;
    })();
    var Rotate = (function () {
        function Rotate(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Rotate.create = function (value0) {
            return function (value1) {
                return new Rotate(value0, value1);
            };
        };
        return Rotate;
    })();
    var Translate = (function () {
        function Translate(value0, value1, value2) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
        };
        Translate.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return new Translate(value0, value1, value2);
                };
            };
        };
        return Translate;
    })();
    var Transform = (function () {
        function Transform(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Transform.create = function (value0) {
            return function (value1) {
                return new Transform(value0, value1);
            };
        };
        return Transform;
    })();
    var SetFont = (function () {
        function SetFont(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        SetFont.create = function (value0) {
            return function (value1) {
                return new SetFont(value0, value1);
            };
        };
        return SetFont;
    })();
    var FillText = (function () {
        function FillText(value0, value1, value2, value3) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
            this.value3 = value3;
        };
        FillText.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return function (value3) {
                        return new FillText(value0, value1, value2, value3);
                    };
                };
            };
        };
        return FillText;
    })();
    var StrokeText = (function () {
        function StrokeText(value0, value1, value2, value3) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
            this.value3 = value3;
        };
        StrokeText.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return function (value3) {
                        return new StrokeText(value0, value1, value2, value3);
                    };
                };
            };
        };
        return StrokeText;
    })();
    var MeasureText = (function () {
        function MeasureText(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        MeasureText.create = function (value0) {
            return function (value1) {
                return new MeasureText(value0, value1);
            };
        };
        return MeasureText;
    })();
    var Save = (function () {
        function Save(value0) {
            this.value0 = value0;
        };
        Save.create = function (value0) {
            return new Save(value0);
        };
        return Save;
    })();
    var Restore = (function () {
        function Restore(value0) {
            this.value0 = value0;
        };
        Restore.create = function (value0) {
            return new Restore(value0);
        };
        return Restore;
    })();
    var GetImageData = (function () {
        function GetImageData(value0, value1, value2, value3, value4) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
            this.value3 = value3;
            this.value4 = value4;
        };
        GetImageData.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return function (value3) {
                        return function (value4) {
                            return new GetImageData(value0, value1, value2, value3, value4);
                        };
                    };
                };
            };
        };
        return GetImageData;
    })();
    var PutImageData = (function () {
        function PutImageData(value0, value1, value2, value3) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
            this.value3 = value3;
        };
        PutImageData.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return function (value3) {
                        return new PutImageData(value0, value1, value2, value3);
                    };
                };
            };
        };
        return PutImageData;
    })();
    var stroke = Control_Monad_Free.liftFC(new Stroke(Prelude.unit));
    var setStrokeStyle = function (s) {
        return Control_Monad_Free.liftFC(new SetStrokeStyle(s, Prelude.unit));
    };
    var setLineWidth = function (w) {
        return Control_Monad_Free.liftFC(new SetLineWidth(w, Prelude.unit));
    };
    var setFillStyle = function (s) {
        return Control_Monad_Free.liftFC(new SetFillStyle(s, Prelude.unit));
    };
    var moveTo = function (x) {
        return function (y) {
            return Control_Monad_Free.liftFC(new MoveTo(x, y, Prelude.unit));
        };
    };
    var lineTo = function (x) {
        return function (y) {
            return Control_Monad_Free.liftFC(new LineTo(x, y, Prelude.unit));
        };
    };
    var fill = Control_Monad_Free.liftFC(new Fill(Prelude.unit));
    var closePath = Control_Monad_Free.liftFC(new ClosePath(Prelude.unit));
    var beginPath = Control_Monad_Free.liftFC(new BeginPath(Prelude.unit));
    var arc = function (a) {
        return Control_Monad_Free.liftFC(new Arc(a, Prelude.unit));
    };
    var runGraphics = function (ctx) {
        var interp = function (_539) {
            if (_539 instanceof SetLineWidth) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value1))(Graphics_Canvas.setLineWidth(_539.value0)(ctx));
            };
            if (_539 instanceof SetFillStyle) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value1))(Graphics_Canvas.setFillStyle(_539.value0)(ctx));
            };
            if (_539 instanceof SetStrokeStyle) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value1))(Graphics_Canvas.setStrokeStyle(_539.value0)(ctx));
            };
            if (_539 instanceof SetShadowColor) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value1))(Graphics_Canvas.setShadowColor(_539.value0)(ctx));
            };
            if (_539 instanceof SetShadowBlur) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value1))(Graphics_Canvas.setShadowBlur(_539.value0)(ctx));
            };
            if (_539 instanceof SetShadowOffsetX) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value1))(Graphics_Canvas.setShadowOffsetX(_539.value0)(ctx));
            };
            if (_539 instanceof SetShadowOffsetY) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value1))(Graphics_Canvas.setShadowOffsetY(_539.value0)(ctx));
            };
            if (_539 instanceof SetLineCap) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value1))(Graphics_Canvas.setLineCap(_539.value0)(ctx));
            };
            if (_539 instanceof SetComposite) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value1))(Graphics_Canvas.setGlobalCompositeOperation(ctx)(_539.value0));
            };
            if (_539 instanceof SetAlpha) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value1))(Graphics_Canvas.setGlobalAlpha(ctx)(_539.value0));
            };
            if (_539 instanceof BeginPath) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value0))(Graphics_Canvas.beginPath(ctx));
            };
            if (_539 instanceof Stroke) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value0))(Graphics_Canvas.stroke(ctx));
            };
            if (_539 instanceof Fill) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value0))(Graphics_Canvas.fill(ctx));
            };
            if (_539 instanceof Clip) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value0))(Graphics_Canvas.clip(ctx));
            };
            if (_539 instanceof LineTo) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value2))(Graphics_Canvas.lineTo(ctx)(_539.value0)(_539.value1));
            };
            if (_539 instanceof MoveTo) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value2))(Graphics_Canvas.moveTo(ctx)(_539.value0)(_539.value1));
            };
            if (_539 instanceof ClosePath) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value0))(Graphics_Canvas.closePath(ctx));
            };
            if (_539 instanceof Arc) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value1))(Graphics_Canvas.arc(ctx)(_539.value0));
            };
            if (_539 instanceof Rect) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value1))(Graphics_Canvas.rect(ctx)(_539.value0));
            };
            if (_539 instanceof Scale) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value2))(Graphics_Canvas.scale({
                    scaleX: _539.value0, 
                    scaleY: _539.value1
                })(ctx));
            };
            if (_539 instanceof Rotate) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value1))(Graphics_Canvas.rotate(_539.value0)(ctx));
            };
            if (_539 instanceof Translate) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value2))(Graphics_Canvas.translate({
                    translateX: _539.value0, 
                    translateY: _539.value1
                })(ctx));
            };
            if (_539 instanceof Transform) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value1))(Graphics_Canvas.transform(_539.value0)(ctx));
            };
            if (_539 instanceof SetFont) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value1))(Graphics_Canvas.setFont(_539.value0)(ctx));
            };
            if (_539 instanceof FillText) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value3))(Graphics_Canvas.fillText(ctx)(_539.value0)(_539.value1)(_539.value2));
            };
            if (_539 instanceof StrokeText) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value3))(Graphics_Canvas.strokeText(ctx)(_539.value0)(_539.value1)(_539.value2));
            };
            if (_539 instanceof MeasureText) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(_539.value1)(Graphics_Canvas.measureText(ctx)(_539.value0));
            };
            if (_539 instanceof Save) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value0))(Graphics_Canvas.save(ctx));
            };
            if (_539 instanceof Restore) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value0))(Graphics_Canvas.restore(ctx));
            };
            if (_539 instanceof GetImageData) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(_539.value4)(Graphics_Canvas.getImageData(ctx)(_539.value0)(_539.value1)(_539.value2)(_539.value3));
            };
            if (_539 instanceof PutImageData) {
                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_539.value3))(Graphics_Canvas.putImageData(ctx)(_539.value0)(_539.value1)(_539.value2));
            };
            throw new Error("Failed pattern match");
        };
        return Control_Monad_Free.runFreeCM(Control_Monad_Rec_Class.monadRecEff)(interp);
    };
    return {
        runGraphics: runGraphics, 
        arc: arc, 
        closePath: closePath, 
        moveTo: moveTo, 
        lineTo: lineTo, 
        fill: fill, 
        stroke: stroke, 
        beginPath: beginPath, 
        setStrokeStyle: setStrokeStyle, 
        setFillStyle: setFillStyle, 
        setLineWidth: setLineWidth
    };
})();
var PS = PS || {};
PS.Rx_Observable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var DOM = PS.DOM;
    
  function subscribe(ob) {
    return function(f) {
      return function() {
        return ob.subscribe(function(value) {
          f(value)();
        });
      };
    };
  }
  ;
    return {
        subscribe: subscribe
    };
})();
var PS = PS || {};
PS.Rx_JQuery = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var DOM = PS.DOM;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Data_Foreign = PS.Data_Foreign;
    var Control_Monad_JQuery = PS.Control_Monad_JQuery;
    var Rx_Observable = PS.Rx_Observable;
    
  function onAsObservable(evt) {
    return function(ob) {
      return function() {
        return ob.onAsObservable(evt);
      }
    }
  }
  ;
    return {
        onAsObservable: onAsObservable
    };
})();
var PS = PS || {};
PS.IP = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $$Math = PS.$$Math;
    var Graphics_Canvas_Free = PS.Graphics_Canvas_Free;
    var Data_Array_Unsafe = PS.Data_Array_Unsafe;
    var Data_Traversable = PS.Data_Traversable;
    var Data_Array = PS.Data_Array;
    var Control_Monad = PS.Control_Monad;
    var Graphics_Canvas = PS.Graphics_Canvas;
    var Control_Monad_JQuery = PS.Control_Monad_JQuery;
    var Global = PS.Global;
    var Debug_Trace = PS.Debug_Trace;
    var Data_Foreign = PS.Data_Foreign;
    var Rx_JQuery = PS.Rx_JQuery;
    var Rx_Observable = PS.Rx_Observable;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_Free = PS.Control_Monad_Free;
    var Data_Coyoneda = PS.Data_Coyoneda;
    function stringify(x) {  return x+"";};
    var toRadian = function (d) {
        return ((2 * $$Math.pi) / 360) * d;
    };
    var radius = 200;
    var defaultVertices = 3;
    var defaultShowTriangles = false;
    var center = {
        x: 210, 
        y: 210
    };
    var drawCircle = Prelude[">>="](Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.arc({
        x: center.x, 
        y: center.y, 
        r: radius, 
        start: 0, 
        end: $$Math.pi * 2
    }))(function () {
        return Prelude[">>="](Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.setFillStyle("#000000"))(function () {
            return Graphics_Canvas_Free.fill;
        });
    });
    var drawPolygon = function (coordinates) {
        return function (showTriangles) {
            return Prelude[">>="](Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.beginPath)(function () {
                return Prelude[">>="](Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.setFillStyle("#008000"))(function () {
                    return Prelude[">>="](Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))((function (_559) {
                        return Graphics_Canvas_Free.moveTo(_559.x)(_559.y);
                    })(Data_Array_Unsafe.head(coordinates)))(function () {
                        return Prelude[">>="](Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Free.applicativeFree(Data_Coyoneda.functorCoyoneda))(Data_Array.map(function (_560) {
                            return Graphics_Canvas_Free.lineTo(_560.x)(_560.y);
                        })(Data_Array_Unsafe.tail(coordinates))))(function () {
                            return Prelude[">>="](Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.closePath)(function () {
                                return Prelude[">>="](Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.fill)(function () {
                                    return Control_Monad.when(Control_Monad_Free.monadFree(Data_Coyoneda.functorCoyoneda))(showTriangles)(Prelude[">>="](Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.setLineWidth(1))(function () {
                                        return Prelude[">>="](Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.setStrokeStyle("#111111"))(function () {
                                            return Prelude[">>="](Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.beginPath)(function () {
                                                return Prelude[">>="](Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Free.applicativeFree(Data_Coyoneda.functorCoyoneda))(Data_Array.map(function (_561) {
                                                    return Prelude[">>="](Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.moveTo(center.x)(center.y))(function () {
                                                        return Prelude[">>="](Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.lineTo(_561.x)(_561.y))(function () {
                                                            return Graphics_Canvas_Free.stroke;
                                                        });
                                                    });
                                                })(coordinates)))(function () {
                                                    return Graphics_Canvas_Free.closePath;
                                                });
                                            });
                                        });
                                    }));
                                });
                            });
                        });
                    });
                });
            });
        };
    };
    var toCoordinates = function (cosSin$prime) {
        return {
            x: center.x + radius * cosSin$prime.c, 
            y: center.y + radius * cosSin$prime.s
        };
    };
    var showPolygon = function (canvas) {
        return function (context) {
            return function (polygonDegree) {
                return function (showTraingles) {
                    return function __do() {
                        var _52 = Graphics_Canvas.getCanvasDimensions(canvas)();
                        Graphics_Canvas.clearRect(context)({
                            h: _52.height, 
                            w: _52.width, 
                            y: 0, 
                            x: 0
                        })();
                        return Graphics_Canvas_Free.runGraphics(context)((function () {
                            var diff = 360 / polygonDegree;
                            var cosSin = function (r) {
                                return {
                                    c: $$Math.cos(r), 
                                    s: $$Math.sin(r)
                                };
                            };
                            var coordinates = Data_Array.map(Prelude["<<<"](Prelude.semigroupoidArr)(toCoordinates)(Prelude["<<<"](Prelude.semigroupoidArr)(cosSin)(Prelude["<<<"](Prelude.semigroupoidArr)(toRadian)(function (_1) {
                                return _1 * diff;
                            }))))(Data_Array[".."](1)(polygonDegree));
                            var lengthSide = (function () {
                                if (coordinates.length >= 2) {
                                    var _711 = coordinates.slice(2);
                                    return $$Math.sqrt($$Math.pow((coordinates[0]).x - (coordinates[1]).x)(2) + $$Math.pow((coordinates[0]).y - (coordinates[1]).y)(2));
                                };
                                throw new Error("Failed pattern match");
                            })();
                            var polygonArea = (1 / 4) * polygonDegree * $$Math.pow(lengthSide)(2) * ($$Math.cos($$Math.pi / polygonDegree) / $$Math.sin($$Math.pi / polygonDegree));
                            var circleArea = $$Math.pow(radius)(2) * $$Math.pi;
                            var polygonAreaPercent = $$Math.round((polygonArea / circleArea) * 100000) / 1000;
                            var piApprox = polygonArea / $$Math.pow(radius)(2);
                            return Prelude[">>="](Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(drawCircle)(function () {
                                return Prelude[">>="](Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(drawPolygon(coordinates)(showTraingles))(function () {
                                    return Prelude["return"](Control_Monad_Free.monadFree(Data_Coyoneda.functorCoyoneda))({
                                        pArea: polygonAreaPercent, 
                                        pi: piApprox
                                    });
                                });
                            });
                        })())();
                    };
                };
            };
        };
    };
    var main = function __do() {
        var _51 = Graphics_Canvas.getCanvasElementById("canvas")();
        var _50 = Graphics_Canvas.getContext2D(_51)();
        var _49 = Control_Monad_JQuery.select("#vertices")();
        var _48 = Control_Monad_JQuery.select("#polygonArea")();
        var _47 = Control_Monad_JQuery.select("#pi")();
        var _46 = Control_Monad_JQuery.select("#triangles")();
        return (function () {
            var updateUI = function (num) {
                return function (showTriangles) {
                    return function __do() {
                        var _41 = showPolygon(_51)(_50)(num)(showTriangles)();
                        Control_Monad_JQuery.setText(Prelude.show(Prelude.showNumber)(_41.pArea) + "%")(_48)();
                        return Control_Monad_JQuery.setText(Prelude.show(Prelude.showNumber)(_41.pi))(_47)();
                    };
                };
            };
            var updateUI$prime = function __do() {
                var _43 = Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["<<<"](Prelude.semigroupoidArr)(function (_0) {
                    return _0 === "true";
                })(stringify))(Control_Monad_JQuery.getProp("checked")(_46))();
                var _42 = Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude[">>>"](Prelude.semigroupoidArr)(stringify)(Global.readInt(10)))(Control_Monad_JQuery.getValue(_49))();
                return updateUI(_42)(_43)();
            };
            return function __do() {
                var _45 = Rx_JQuery.onAsObservable("click")(_46)();
                Rx_Observable.subscribe(_45)(function (_562) {
                    return Prelude["void"](Control_Monad_Eff.functorEff)(updateUI$prime);
                })();
                var _44 = Rx_JQuery.onAsObservable("focus")(_49)();
                Rx_Observable.subscribe(_44)(function (_563) {
                    return Prelude["void"](Control_Monad_Eff.functorEff)(updateUI$prime);
                })();
                return updateUI(defaultVertices)(defaultShowTriangles)();
            };
        })()();
    };
    return {
        drawCircle: drawCircle, 
        showPolygon: showPolygon, 
        main: main, 
        stringify: stringify, 
        drawPolygon: drawPolygon, 
        defaultShowTriangles: defaultShowTriangles, 
        defaultVertices: defaultVertices, 
        radius: radius, 
        center: center, 
        toCoordinates: toCoordinates, 
        toRadian: toRadian
    };
})();
PS.IP.main();
